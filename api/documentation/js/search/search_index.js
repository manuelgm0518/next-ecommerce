var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiMethodParams.html",[0,1.875,1,2.397]],["body/interfaces/ApiMethodParams.html",[0,1.481,1,4.245,2,1.893,3,0.161,4,0.161,5,0.14,6,2.096,7,2.096,8,0.349,9,1.236,10,1.793,11,1.895,12,2.82,13,3.605,14,3.605,15,3.018,16,3.837,17,1.692,18,0.822,19,0.023,20,2.303,21,0.457,22,2.779,23,1.893,24,2.779,25,2.367,26,2.779,27,2.779,28,2.779,29,2.367,30,0.559,31,4.067,32,4.067,33,4.067,34,2.779,35,0.752,36,2.779,37,2.367,38,2.096,39,1.731,40,2.77,41,2.367,42,1.893,43,1.209,44,1.893,45,2.77,46,2.367,47,5.012,48,5.012,49,5.012,50,0.98,51,4.067,52,2.779,53,2.779,54,1.007,55,2.779,56,2.779,57,2.779,58,2.779,59,2.779,60,2.779,61,2.779,62,1.593,63,2.779,64,0.326,65,2.367,66,2.779,67,4.81,68,2.367,69,2.779,70,2.367,71,2.779,72,2.367,73,2.779,74,2.367,75,2.779,76,2.779,77,0.013,78,0.013]],["title/modules/AppModule.html",[79,1.531,80,2.397]],["body/modules/AppModule.html",[3,0.249,4,0.249,5,0.217,19,0.023,21,0.467,30,0.867,64,0.249,77,0.017,78,0.017,79,2.39,80,4.797,81,2.138,82,2.726,83,3.668,84,3.668,85,4.189,86,4.189,87,3.863,88,3.154,89,2.473,90,2.473,91,4.306,92,3.42,93,4.306,94,4.306,95,3.668,96,2.294,97,2.682,98,0.038]],["title/classes/AuthTokenResponse.html",[98,0.031,99,2.192]],["body/classes/AuthTokenResponse.html",[3,0.256,4,0.256,5,0.223,8,0.555,9,1.698,17,1.427,18,0.828,19,0.023,21,0.41,35,1.198,54,2.023,64,0.256,77,0.017,78,0.017,98,0.039,99,3.48,100,1.701,101,4.171,102,4.171,103,3.769,104,1.996,105,4.171,106,4.425,107,1.124,108,4.425,109,3.193,110,4.425,111,2.054]],["title/entities/Authentication.html",[104,1.009,112,1.633]],["body/entities/Authentication.html",[3,0.194,4,0.194,5,0.169,8,0.42,9,1.41,11,1.716,15,2.645,17,1.47,18,0.778,19,0.022,21,0.422,35,0.905,54,2.084,64,0.194,77,0.014,78,0.014,98,0.041,104,1.331,107,1.158,109,2.857,112,2.153,113,1.66,114,2.847,115,2.631,116,3.002,117,4.538,118,1.68,119,3.343,120,3.343,121,3.319,122,5.329,123,4.018,124,3.498,125,2.303,126,3.952,127,3.343,128,3.002,129,3.343,130,4.64,131,3.343,132,3.343,133,3.419,134,3.498,135,2.89,136,1.41,137,4.64,138,3.952,139,3.343,140,3.952,141,3.343,142,3.343,143,4.902,144,2.277,145,3.629,146,4.64,147,4.64,148,3.16,149,1.552,150,2.521,151,3.343,152,3.343,153,2.521]],["title/modules/AuthenticationModule.html",[79,1.531,154,2.192]],["body/modules/AuthenticationModule.html",[3,0.212,4,0.212,5,0.185,19,0.023,21,0.49,30,0.736,64,0.212,77,0.015,78,0.015,79,2.147,81,1.816,82,2.449,88,2.833,89,2.1,90,2.1,92,2.278,97,3.073,98,0.032,104,1.049,113,1.816,133,2.628,154,4.301,155,3.115,156,3.115,157,3.115,158,3.454,159,4.004,160,4.004,161,3.657,162,3.36,163,3.657,164,2.758,165,4.933,166,2.1,167,3.36,168,1.591,169,2.774,170,3.115,171,2.278,172,3.657,173,3.657,174,3.657,175,3.657,176,3.657,177,3.115,178,3.657,179,3.657,180,3.657,181,3.657]],["title/injectables/AuthenticationService.html",[158,1.747,182,0.708]],["body/injectables/AuthenticationService.html",[3,0.114,4,0.114,5,0.099,8,0.247,10,1.391,15,2.675,17,1.47,18,0.695,19,0.023,20,1.926,21,0.433,30,0.396,43,0.857,50,1.421,62,1.391,64,0.114,77,0.01,78,0.01,98,0.017,99,1.227,104,1.827,105,2.13,107,1.084,111,0.914,115,0.857,116,2.552,117,1.678,128,0.978,133,2.573,149,0.914,158,1.553,164,1.486,168,0.857,182,0.629,183,0.805,184,1.678,185,1.068,186,2.847,187,2.358,188,2.358,189,4.427,190,2.952,191,3.127,192,3.127,193,3.127,194,1.278,195,1.97,196,3.669,197,3.889,198,5.387,199,1.97,200,1.655,201,1.195,202,3.127,203,2.664,204,1.97,205,1.655,206,2.665,207,2.664,208,3.015,209,1.97,210,1.131,211,1.342,212,1.97,213,3.127,214,4.427,215,1.97,216,1.342,217,1.227,218,2.358,219,3.127,220,2.932,221,1.97,222,3.127,223,3.201,224,1.97,225,1.678,226,1.678,227,1.97,228,1.97,229,1.97,230,1.342,231,1.486,232,1.342,233,2.664,234,2.46,235,1.227,236,1.97,237,1.342,238,1.97,239,1.495,240,1.97,241,3.127,242,2.738,243,1.976,244,1.97,245,1.97,246,2.358,247,1.97,248,1.97,249,1.97,250,1.678,251,1.678,252,1.97,253,1.97,254,2.358,255,1.97,256,2.664,257,3.127,258,2.664,259,3.127,260,1.97,261,3.127,262,1.97,263,1.678,264,3.127,265,1.97,266,1.678,267,1.97,268,3.127,269,3.015,270,1.97,271,1.97,272,1.97,273,2.13,274,1.97,275,1.97,276,1.97,277,1.227,278,1.97,279,1.97,280,1.97,281,1.796,282,1.97,283,1.97,284,3.889,285,1.97,286,1.97,287,1.97]],["title/classes/AuthenticationSignUpDto.html",[98,0.031,208,2.397]],["body/classes/AuthenticationSignUpDto.html",[3,0.264,4,0.264,5,0.23,8,0.573,9,1.732,11,1.471,17,1.455,18,0.617,19,0.022,21,0.456,35,1.236,50,1.1,54,1.654,64,0.264,77,0.018,78,0.018,98,0.04,100,1.756,104,1.31,107,0.919,109,2.829,116,2.267,208,3.881,220,4.684,226,3.889,288,4.854,289,3.443,290,3.889,291,4.231,292,3.889,293,2.433,294,3.881,295,2.844,296,1.866,297,4.566]],["title/modules/CoreModule.html",[79,1.531,85,2.192]],["body/modules/CoreModule.html",[3,0.183,4,0.183,5,0.16,19,0.023,21,0.488,30,0.636,50,1.075,62,0.856,64,0.183,77,0.014,78,0.014,79,1.942,81,1.57,82,2.215,85,4.142,88,2.563,89,1.816,90,1.816,92,2.779,97,2.779,98,0.046,128,1.57,144,2.154,154,4.228,162,3.039,167,2.154,168,1.376,169,3.151,171,1.97,218,2.384,242,1.685,243,1.216,298,2.693,299,3.162,300,2.693,301,2.693,302,3.162,303,4.462,304,4.462,305,4.462,306,3.162,307,2.384,308,4.462,309,4.462,310,4.462,311,2.384,312,3.162,313,3.162,314,1.97,315,1.97,316,3.162,317,3.039,318,3.162,319,3.039,320,3.162,321,5.171,322,5.617,323,3.162,324,2.154,325,4.462,326,2.384,327,4.462,328,3.162,329,3.162,330,3.162,331,3.162,332,3.162,333,3.162,334,2.384,335,3.162,336,3.162]],["title/injectables/DatabaseService.html",[182,0.708,319,2.397]],["body/injectables/DatabaseService.html",[3,0.201,4,0.201,5,0.175,8,0.436,9,1.446,10,0.939,17,1.616,18,0.856,19,0.023,21,0.399,30,0.698,62,0.939,64,0.201,77,0.015,78,0.015,98,0.031,107,1.274,118,1.724,126,4.98,128,1.722,168,1.51,169,2.938,182,0.958,183,1.418,185,1.625,190,3.961,194,1.418,200,1.117,201,1.25,205,1.117,239,1.334,277,2.161,319,3.242,337,2.955,338,3.642,339,4.98,340,5.847,341,2.616,342,4.76,343,3.47,344,5.433,345,3.47,346,3.47,347,3.47,348,4.76,349,3.47,350,2.363,351,1.61,352,4.054,353,3.47,354,4.76,355,3.47,356,4.76,357,3.47,358,4.76,359,3.47,360,2.955,361,2.955,362,3.47,363,3.47,364,3.47,365,2.955]],["title/injectables/EnvironmentService.html",[169,1.633,182,0.708]],["body/injectables/EnvironmentService.html",[3,0.212,4,0.212,5,0.185,8,0.459,10,1.335,17,0.934,18,0.755,19,0.023,21,0.41,30,0.736,39,2.278,62,1.689,64,0.212,77,0.015,78,0.015,98,0.032,107,1.294,153,2.758,169,2.29,182,0.993,183,1.495,185,1.684,194,1.495,200,1.798,201,1.055,205,1.178,307,2.758,315,2.278,351,1.697,366,3.115,367,4.933,368,5.583,369,5.583,370,5.583,371,3.802,372,3.657,373,6.429,374,3.657,375,4.933,376,5.976,377,3.657,378,4.755,379,3.657,380,3.657,381,3.657,382,3.657,383,3.657,384,3.657,385,3.657,386,3.657,387,2.758,388,4.21,389,5.583,390,3.657,391,3.657,392,3.657,393,3.657,394,3.657]],["title/classes/EnvironmentVariables.html",[98,0.031,315,2.192]],["body/classes/EnvironmentVariables.html",[3,0.192,4,0.192,5,0.167,8,0.415,9,1.4,17,1.714,18,0.896,19,0.023,21,0.243,54,2.4,64,0.267,77,0.014,78,0.014,98,0.041,100,1.272,107,1.334,118,2.259,138,2.818,277,2.061,314,2.061,315,2.869,339,4.513,360,2.818,371,3.609,387,4.321,395,2.495,396,5.299,397,5.299,398,5.299,399,5.299,400,5.299,401,5.299,402,5.299,403,5.114,404,3.309,405,3.309,406,6.024,407,3.309,408,3.309,409,3.309,410,3.309,411,4.606,412,3.309,413,5.299,414,3.309,415,3.309,416,3.309,417,3.923,418,3.923,419,3.923,420,2.495,421,2.495]],["title/classes/HttpExceptionFilter.html",[98,0.031,317,2.397]],["body/classes/HttpExceptionFilter.html",[3,0.192,4,0.192,5,0.167,8,0.415,10,1.247,12,1.763,18,0.623,19,0.023,21,0.389,25,2.818,30,0.666,50,1.451,64,0.192,77,0.014,78,0.014,98,0.029,100,1.272,107,0.927,169,2.895,171,2.061,185,1.573,194,1.352,200,1.483,201,1.288,205,1.066,239,1.272,243,1.272,317,3.137,341,2.495,350,3.137,351,1.536,361,4.513,365,2.818,422,4.513,423,2.818,424,5.299,425,5.73,426,3.309,427,4.606,428,5.73,429,3.309,430,4.513,431,3.309,432,4.606,433,3.923,434,2.818,435,3.923,436,3.309,437,4.606,438,3.309,439,2.495,440,3.309,441,3.309,442,2.495,443,3.309,444,3.996,445,3.309,446,3.309,447,3.309,448,4.542,449,3.309,450,3.996,451,4.321,452,3.473,453,3.309,454,3.309,455,3.309,456,3.309,457,3.309,458,3.309,459,3.309,460,3.309,461,3.309,462,2.495,463,3.309]],["title/interfaces/IDecodedToken.html",[0,1.875,223,2.192]],["body/interfaces/IDecodedToken.html",[0,2.639,2,3.374,3,0.287,4,0.287,5,0.25,8,0.622,9,1.821,17,1.645,18,0.81,19,0.022,64,0.287,77,0.019,78,0.019,116,3.322,118,2.332,223,3.731,258,5.699,464,4.219,465,4.219]],["title/interfaces/IHttpResponse.html",[0,1.875,466,2.021]],["body/interfaces/IHttpResponse.html",[0,2.45,2,3.132,3,0.266,4,0.266,5,0.232,8,0.577,9,1.74,10,1.765,12,2.45,17,1.713,18,0.882,19,0.022,64,0.266,77,0.018,78,0.018,118,1.665,201,0.983,281,3.746,378,5.308,444,3.468,448,5.059,450,3.468,451,3.468,462,3.468,466,3.288,467,3.917,468,3.917,469,5.724]],["title/injectables/JwtAuthGuard.html",[44,2.397,182,0.708]],["body/injectables/JwtAuthGuard.html",[3,0.297,4,0.297,5,0.259,19,0.022,21,0.449,30,1.033,44,4.168,64,0.297,77,0.019,78,0.019,98,0.045,166,2.947,182,1.231,183,2.097,296,2.097,470,4.37,471,3.869,472,4.37,473,5.131]],["title/injectables/JwtAuthStrategy.html",[159,2.192,182,0.708]],["body/injectables/JwtAuthStrategy.html",[3,0.212,4,0.212,5,0.185,8,0.459,10,1.335,18,0.667,19,0.023,21,0.482,30,0.736,43,1.591,50,0.881,62,0.99,64,0.212,77,0.015,78,0.015,98,0.032,104,1.049,107,0.993,111,1.697,158,2.967,159,3.073,166,2.1,169,2.984,170,3.115,177,3.115,182,0.993,183,1.495,185,1.684,186,2.429,190,2.833,194,2.016,200,1.589,201,1.055,205,1.178,206,2.147,223,3.722,225,3.115,234,1.495,239,1.897,254,3.72,296,1.495,324,3.36,341,2.758,420,3.72,474,4.755,475,2.758,476,4.21,477,3.657,478,4.933,479,3.657,480,3.115,481,3.657,482,3.115,483,2.758,484,2.758,485,3.115,486,3.115,487,3.657,488,3.657,489,3.657,490,3.657,491,3.657,492,3.657]],["title/injectables/LocalAuthGuard.html",[182,0.708,493,2.397]],["body/injectables/LocalAuthGuard.html",[3,0.297,4,0.297,5,0.259,19,0.022,21,0.449,30,1.033,64,0.297,77,0.019,78,0.019,98,0.045,166,2.947,182,1.231,183,2.097,296,2.097,471,3.869,472,4.37,493,4.168,494,4.37,495,5.131]],["title/injectables/LocalAuthStrategy.html",[160,2.192,182,0.708]],["body/injectables/LocalAuthStrategy.html",[3,0.224,4,0.224,5,0.195,8,0.485,10,1.386,17,1.668,18,0.692,19,0.023,21,0.467,30,0.778,50,0.931,62,1.046,64,0.224,77,0.016,78,0.016,98,0.034,104,1.109,107,1.03,111,1.794,125,2.542,158,3.034,160,3.189,166,2.22,182,1.03,183,1.58,185,1.748,186,2.498,194,1.58,200,1.649,201,1.095,205,1.245,206,2.228,234,1.58,239,1.486,254,3.861,296,1.58,324,3.487,338,3.806,351,1.794,475,2.915,476,3.861,480,3.293,482,3.293,483,2.915,484,2.915,485,3.293,486,3.293,496,4.889,497,3.866,498,3.866,499,5.12,500,3.866,501,3.293,502,3.866,503,3.866]],["title/entities/Product.html",[112,1.633,504,1.747]],["body/entities/Product.html",[3,0.208,4,0.208,5,0.181,8,0.45,9,1.479,11,2.172,17,1.514,18,0.884,19,0.022,21,0.357,35,0.971,54,2.245,64,0.208,77,0.015,78,0.015,98,0.032,107,1.247,109,3.077,112,2.26,113,1.78,115,2.405,118,2.315,121,3.692,145,4.221,148,3.764,149,1.664,201,1.268,216,3.315,334,2.704,504,3.077,505,3.054,506,4.673,507,4.167,508,4.868,509,3.586,510,3.586,511,3.586,512,4.868,513,3.586,514,3.586,515,4.868,516,3.586,517,3.586,518,4.868,519,3.315,520,3.586,521,3.586,522,3.586]],["title/classes/ProductCreateDto.html",[98,0.031,523,2.192]],["body/classes/ProductCreateDto.html",[3,0.293,4,0.293,5,0.255,11,1.627,19,0.022,21,0.445,35,1.367,50,1.217,64,0.293,77,0.019,78,0.019,98,0.045,100,1.942,201,1.08,293,2.691,296,2.064,504,2.507,506,3.808,507,3.808,523,3.775,524,3.808,525,3.808,526,3.44,527,5.051]],["title/classes/ProductUpdateDto.html",[98,0.031,528,2.192]],["body/classes/ProductUpdateDto.html",[3,0.293,4,0.293,5,0.255,11,1.627,19,0.022,21,0.445,35,1.367,64,0.293,77,0.019,78,0.019,98,0.045,100,1.942,201,1.08,293,2.691,296,2.064,504,2.507,506,3.808,507,3.808,524,3.808,526,3.44,528,3.775,529,3.808,530,4.302,531,5.051]],["title/controllers/ProductsController.html",[532,1.875,533,2.397]],["body/controllers/ProductsController.html",[3,0.102,4,0.102,5,0.089,8,0.221,10,1.124,11,1.835,12,1.922,13,3.881,14,3.881,15,2.663,16,3.881,18,0.77,19,0.022,20,0.767,21,0.394,23,1.947,30,0.355,35,0.477,39,1.098,43,0.767,50,1.1,54,1.653,62,1.236,64,0.102,77,0.009,78,0.009,96,0.939,98,0.016,107,0.919,115,2.913,118,2.249,134,3.131,135,3.702,185,0.976,186,2.703,200,1.337,201,1.101,205,1.47,206,2.479,210,1.642,234,1.866,239,0.678,243,1.596,246,3.686,277,3.045,281,3.272,295,1.098,326,4.296,351,0.818,466,1.012,504,3.438,519,1.947,523,2.586,526,1.2,528,2.586,532,0.939,533,1.947,534,1.501,535,2.586,536,1.947,537,2.828,538,2.435,539,1.947,540,1.2,541,1.501,542,3.883,543,2.435,544,4.045,545,2.435,546,2.435,547,3.881,548,1.762,549,1.2,550,1.501,551,2.435,552,2.435,553,3.608,554,1.762,555,1.501,556,3.109,557,3.131,558,2.435,559,1.762,560,1.501,561,1.501,562,3.536,563,1.762,564,1.2,565,3.33,566,1.501,567,2.435,568,2.435,569,2.435,570,1.762,571,1.501,572,3.536,573,1.329,574,1.098,575,1.947,576,2.458,577,1.947,578,1.781,579,1.501,580,2.072,581,1.762,582,1.762,583,1.762,584,2.458,585,1.501,586,1.762,587,1.762,588,3.608,589,1.501,590,1.762,591,1.501,592,1.762,593,1.501,594,1.762]],["title/modules/ProductsModule.html",[79,1.531,86,2.192]],["body/modules/ProductsModule.html",[3,0.236,4,0.236,5,0.206,19,0.023,21,0.487,30,0.82,64,0.236,77,0.016,78,0.016,79,2.306,81,2.023,82,2.631,86,4.308,87,3.807,88,3.044,89,2.34,90,2.34,92,3.301,95,3.47,96,3.138,97,3.301,98,0.036,113,2.023,162,3.609,167,2.775,168,1.773,171,2.538,504,2.023,533,4.011,580,4.061,595,3.47,596,3.47,597,3.47,598,4.074,599,4.074,600,4.074]],["title/injectables/ProductsService.html",[182,0.708,580,2.021]],["body/injectables/ProductsService.html",[3,0.152,4,0.152,5,0.132,8,0.329,10,1.56,18,0.779,19,0.023,21,0.423,30,0.527,50,1.388,62,1.488,64,0.152,77,0.012,78,0.012,98,0.023,107,1.159,115,2.392,118,2.087,149,1.216,168,1.14,182,0.784,183,1.071,185,1.33,186,2.928,190,1.505,194,1.592,196,3.504,200,1.855,201,1.232,205,1.771,206,2.773,210,3.309,211,1.785,230,1.785,232,1.785,234,2.438,235,1.632,239,1.008,242,2.741,243,1.978,269,2.653,273,1.785,421,2.937,504,3.21,519,2.653,523,3.204,526,1.785,528,3.204,535,2.426,536,2.653,537,2.653,539,2.653,540,2.653,549,2.653,564,2.653,579,2.232,580,2.237,601,2.232,602,3.317,603,2.621,604,2.621,605,3.895,606,2.621,607,2.621,608,3.317,609,4.382,610,2.621,611,3.317,612,4.382,613,2.621,614,2.621,615,1.976,616,2.621,617,2.621,618,2.621,619,1.976,620,2.621,621,2.621,622,4.648,623,3.165,624,2.621,625,2.621,626,2.621,627,2.621]],["title/entities/Role.html",[112,1.633,133,1.875]],["body/entities/Role.html",[3,0.221,4,0.221,5,0.192,8,0.715,9,1.541,11,1.633,17,1.295,18,0.685,19,0.023,20,2.479,21,0.446,35,1.031,43,1.657,54,1.836,62,1.031,64,0.221,77,0.016,78,0.016,98,0.045,107,1.02,109,2.829,112,2.353,113,1.891,115,2.479,116,2.517,118,1.836,121,3.157,123,2.872,128,1.891,133,2.701,145,3.453,148,2.594,149,1.768,153,2.872,201,1.299,237,2.594,314,2.372,352,3.244,403,3.823,628,4.853,629,3.244,630,6.075,631,5.07,632,3.809,633,3.809,634,3.809,635,3.809,636,3.809,637,4.853,638,3.809,639,4.318,640,3.809,641,3.809,642,3.809,643,3.809]],["title/guards/RolesGuard.html",[45,2.397,644,2.653]],["body/guards/RolesGuard.html",[3,0.215,4,0.215,5,0.187,8,0.466,10,1.348,18,0.674,19,0.023,20,1.614,21,0.46,30,0.747,42,2.527,43,1.614,45,3.393,50,1.355,62,1.348,64,0.215,77,0.015,78,0.015,98,0.033,104,1.429,107,1.002,111,1.722,124,2.797,128,2.473,133,1.977,136,1.127,182,1.002,185,1.701,194,1.516,200,1.604,201,1.065,205,1.195,231,2.797,242,1.977,243,1.426,311,2.797,350,2.527,351,1.722,388,3.756,439,2.797,645,2.797,646,3.16,647,5.12,648,3.71,649,6.456,650,3.71,651,4.243,652,4.533,653,3.71,654,2.797,655,4.981,656,3.71,657,3.71,658,3.71,659,3.16,660,4.981,661,3.71,662,3.71,663,3.71,664,3.71,665,3.71,666,3.71]],["title/controllers/SessionController.html",[532,1.875,667,2.397]],["body/controllers/SessionController.html",[3,0.152,4,0.152,5,0.133,8,0.33,10,1.056,11,1.659,12,2.479,13,3.508,14,3.508,16,3.508,18,0.629,19,0.023,21,0.468,29,2.237,30,0.528,35,0.711,39,1.636,42,1.789,43,1.143,46,2.237,50,0.94,54,1.413,62,1.056,64,0.152,77,0.012,78,0.012,96,1.399,98,0.023,99,2.898,102,3.508,104,1.829,107,0.785,111,1.219,122,3.322,135,3.208,136,1.99,185,1.332,186,2.509,187,2.941,188,2.941,200,1.256,201,0.834,203,2.237,205,1.256,206,2.241,234,1.594,239,1.01,243,1.98,250,3.322,281,2.958,295,1.636,351,1.219,371,1.789,466,1.508,493,1.789,532,2.078,535,2.429,542,2.941,547,3.927,557,2.941,565,3.169,573,1.98,574,1.636,578,2.898,667,2.657,668,2.237,669,3.901,670,5.15,671,5.15,672,3.322,673,4.911,674,4.387,675,5.766,676,2.626,677,3.169,678,2.626,679,2.626,680,2.958,681,2.941,682,2.626,683,3.901,684,1.789,685,1.98,686,2.429,687,1.789,688,2.672,689,1.98,690,2.626,691,2.626,692,2.626,693,2.626,694,2.626,695,2.626,696,2.626,697,2.626,698,2.626,699,2.626]],["title/guards/SessionGuard.html",[644,2.653,700,2.653]],["body/guards/SessionGuard.html",[3,0.221,4,0.221,5,0.192,8,0.478,10,1.372,18,0.685,19,0.023,21,0.418,30,0.766,50,1.373,62,1.031,64,0.221,77,0.016,78,0.016,98,0.034,104,1.634,107,1.02,111,1.768,125,1.891,136,1.732,182,1.02,185,1.731,186,2.479,194,1.557,200,1.633,201,1.084,205,1.227,206,2.206,231,2.872,234,1.557,239,1.464,242,2.029,243,1.464,350,2.594,351,1.768,439,2.872,442,2.872,645,2.872,647,5.174,651,4.318,652,4.581,659,3.244,681,2.872,689,2.872,700,3.823,701,4.853,702,3.244,703,3.809,704,3.466,705,3.809,706,3.809,707,5.07,708,4.318,709,3.809,710,3.244,711,3.244,712,3.809,713,3.244]],["title/injectables/SessionService.html",[182,0.708,688,2.021]],["body/injectables/SessionService.html",[3,0.153,4,0.153,5,0.134,8,0.332,10,1.266,17,1.194,18,0.632,19,0.023,20,1.152,21,0.451,23,2.673,30,0.533,43,1.152,50,1.393,62,1.062,64,0.153,77,0.012,78,0.012,98,0.023,104,1.341,105,3.522,107,1.041,116,1.314,125,2.741,128,1.314,136,1.757,149,1.229,158,2.567,168,1.152,182,0.79,183,1.082,185,1.34,186,2.732,187,2.959,188,2.959,190,2.254,194,1.604,196,3.522,200,1.506,201,1,205,1.506,206,2.25,207,3.342,210,1.521,216,1.803,217,1.649,218,2.959,220,1.996,230,1.803,232,1.803,234,2.446,235,1.649,239,1.509,242,2.091,243,1.509,256,3.342,269,2.673,273,1.803,338,1.649,452,1.996,476,3.526,484,1.996,584,1.803,615,1.996,619,1.996,623,1.803,680,2.97,686,1.649,687,1.803,688,2.254,713,2.255,714,2.255,715,5.171,716,2.255,717,2.648,718,3.342,719,3.924,720,2.648,721,5.171,722,2.648,723,2.648,724,1.411,725,2.255,726,2.648,727,3.924,728,2.648,729,2.255,730,2.444,731,2.648,732,2.444,733,2.648,734,2.255,735,3.924,736,2.648,737,2.255,738,2.648,739,2.255,740,3.924,741,2.648,742,2.648,743,2.648,744,3.924,745,2.255]],["title/entities/User.html",[112,1.633,136,1.069]],["body/entities/User.html",[3,0.177,4,0.177,5,0.154,8,0.383,9,1.322,10,1.177,11,1.78,15,1.514,17,1.597,18,0.821,19,0.023,20,1.892,21,0.446,35,0.825,43,1.327,54,2.116,62,1.177,64,0.177,77,0.014,78,0.014,98,0.045,104,1.833,107,1.176,109,2.901,111,1.416,112,2.019,113,1.514,115,2.206,116,1.514,118,1.575,121,3.442,123,3.279,125,2.901,128,1.514,136,1.679,140,3.704,143,3.704,144,2.077,145,3.764,148,2.962,149,1.416,201,0.93,314,1.899,403,3.822,710,3.704,730,3.157,732,3.157,746,2.598,747,3.05,748,3.05,749,3.05,750,3.05,751,6.075,752,3.05,753,3.05,754,4.349,755,3.05,756,3.05,757,3.05,758,4.349,759,3.05,760,4.349,761,4.349,762,4.349,763,4.349,764,3.05,765,3.05,766,3.05,767,3.05,768,3.05,769,3.05]],["title/classes/UserAuthTokenDto.html",[98,0.031,686,2.192]],["body/classes/UserAuthTokenDto.html",[3,0.241,4,0.241,5,0.21,8,0.523,9,1.634,11,1.732,17,1.373,18,0.727,19,0.022,21,0.395,35,1.128,54,1.947,64,0.241,77,0.017,78,0.017,98,0.037,100,1.602,102,3.662,104,1.542,105,4.055,107,1.082,109,2.956,121,3.349,124,4.054,135,3.349,136,2.089,150,4.489,324,3.662,544,4.054,547,3.662,673,4.58,686,3.349,724,2.22,770,3.419,771,3.549,772,5.377,773,5.377,774,4.167,775,4.167]],["title/classes/UserCreateDto.html",[98,0.031,776,2.192]],["body/classes/UserCreateDto.html",[3,0.294,4,0.294,5,0.256,19,0.022,21,0.446,35,1.372,50,1.221,64,0.294,77,0.019,78,0.019,98,0.045,100,1.95,125,2.517,136,1.541,293,2.702,296,2.072,525,3.823,724,2.702,730,3.158,732,3.158,770,2.912,776,3.784,777,4.319]],["title/classes/UserLogInDto.html",[98,0.031,677,2.397]],["body/classes/UserLogInDto.html",[3,0.295,4,0.295,5,0.257,19,0.022,21,0.447,35,1.378,64,0.295,77,0.019,78,0.019,98,0.045,100,1.957,125,2.527,136,1.547,293,2.712,296,2.081,338,3.171,677,4.148,680,2.924,770,2.924,778,4.336,779,5.091,780,5.091]],["title/classes/UserSignUpDto.html",[98,0.031,680,2.021]],["body/classes/UserSignUpDto.html",[3,0.242,4,0.242,5,0.211,8,0.525,9,1.637,11,1.735,17,1.609,18,0.729,19,0.022,21,0.438,35,1.131,50,1.007,54,1.951,64,0.242,77,0.017,78,0.017,98,0.037,100,1.607,107,1.084,109,2.96,125,2.075,136,1.27,289,3.152,290,3.56,291,4.061,292,3.56,293,2.227,294,3.67,295,2.604,296,1.708,338,4.06,680,3.095,724,2.227,730,2.604,732,2.604,745,5.078,770,3.424,777,3.56,781,4.18,782,5.388,783,5.388,784,4.18,785,3.152,786,4.18]],["title/classes/UserUpdateDto.html",[98,0.031,787,2.192]],["body/classes/UserUpdateDto.html",[3,0.294,4,0.294,5,0.256,19,0.022,21,0.446,35,1.372,50,1.221,64,0.294,77,0.019,78,0.019,98,0.045,100,1.95,136,1.541,293,2.702,296,2.072,529,3.823,530,4.319,724,2.702,730,3.158,732,3.158,770,2.912,787,3.784,788,5.071]],["title/controllers/UsersController.html",[532,1.875,789,2.397]],["body/controllers/UsersController.html",[3,0.099,4,0.099,5,0.086,8,0.214,10,1.216,11,1.816,12,1.882,13,3.841,14,3.841,15,2.632,16,3.841,18,0.781,19,0.023,20,0.743,21,0.414,23,1.899,30,0.344,35,0.462,39,1.064,40,1.899,41,1.455,42,1.163,43,0.743,50,1.082,54,1.627,62,1.216,64,0.099,77,0.009,78,0.009,96,0.91,98,0.015,107,0.904,115,2.899,118,2.233,134,3.074,135,3.669,136,2.121,185,0.952,186,2.683,200,1.446,201,1.134,205,1.446,206,2.454,210,1.601,234,1.836,239,0.657,243,1.567,246,3.633,277,3.001,281,3.239,295,1.064,326,4.253,351,0.793,466,0.981,532,0.91,535,2.539,536,1.899,537,1.899,538,2.375,539,1.899,540,1.163,541,1.455,542,3.833,543,2.375,544,3.997,545,2.375,546,2.375,547,3.841,549,1.163,550,1.455,551,2.375,552,2.375,555,1.455,556,2.406,557,3.074,558,2.375,560,1.455,561,1.455,562,3.472,564,1.163,565,3.282,566,1.455,567,2.375,568,2.375,569,2.375,571,1.455,572,3.472,573,1.288,574,1.064,575,1.899,576,2.406,577,1.899,578,1.736,584,1.899,585,1.455,589,1.455,591,1.455,593,1.455,684,1.163,687,1.163,689,1.288,704,1.882,711,1.455,724,0.91,776,2.539,787,2.539,789,1.899,790,1.455,791,1.708,792,3.532,793,1.708,794,1.708,795,2.102,796,1.708,797,1.708,798,1.708,799,1.708,800,1.288,801,1.708,802,1.708,803,2.788,804,1.708,805,1.708,806,1.708,807,1.708,808,3.532,809,1.708,810,1.708]],["title/modules/UsersModule.html",[79,1.531,87,2.021]],["body/modules/UsersModule.html",[3,0.232,4,0.232,5,0.202,19,0.022,21,0.472,30,0.807,64,0.232,77,0.016,78,0.016,79,2.282,81,1.991,82,2.604,87,3.997,88,3.013,89,2.303,90,2.303,92,2.498,96,3.114,97,3.267,98,0.035,113,1.991,136,1.219,162,3.572,167,2.732,168,1.745,171,2.498,667,3.981,688,4.052,704,3.759,789,3.981,811,3.416,812,3.416,813,3.416,814,4.011,815,4.011]],["title/injectables/UsersService.html",[182,0.708,704,1.875]],["body/injectables/UsersService.html",[3,0.147,4,0.147,5,0.128,8,0.319,10,1.542,18,0.77,19,0.023,21,0.434,30,0.512,50,1.372,62,1.469,64,0.147,77,0.012,78,0.012,98,0.022,104,1.742,107,1.147,111,1.18,115,2.362,118,2.063,136,1.952,149,1.18,168,1.106,182,0.766,183,1.039,185,1.3,186,2.913,190,1.46,194,1.556,196,3.452,200,1.835,201,1.218,205,1.748,206,2.752,210,3.393,211,2.594,230,1.732,232,1.732,234,2.414,235,1.584,239,0.978,242,2.701,243,1.949,269,2.594,273,1.732,421,2.871,535,2.372,536,2.594,537,2.594,539,2.594,540,2.594,549,2.594,564,2.594,602,3.243,608,3.243,609,4.317,611,3.243,612,4.317,615,1.917,619,1.917,623,3.109,687,1.732,704,2.029,716,2.166,718,3.243,724,1.355,725,2.166,729,2.166,734,2.166,737,3.888,739,2.166,776,3.157,787,3.157,795,2.871,816,2.166,817,2.543,818,2.543,819,2.543,820,2.543,821,2.543,822,2.543,823,2.543,824,2.543,825,2.543,826,2.543,827,2.543]],["title/coverage.html",[828,4.093]],["body/coverage.html",[0,2.175,1,1.446,5,0.107,6,4.18,7,4.18,15,1.054,18,0.287,19,0.023,38,1.601,40,1.446,44,1.446,45,1.446,47,5.232,77,0.01,78,0.01,98,0.054,99,1.322,101,3.143,102,1.446,103,1.808,104,0.609,112,2.142,114,1.808,116,1.054,133,1.131,136,0.645,150,1.601,158,1.054,159,1.322,160,1.322,169,0.985,182,1.213,184,1.808,208,1.446,223,1.322,237,1.446,243,0.816,288,1.808,289,2.501,291,1.446,294,1.446,315,1.322,317,1.446,319,1.446,334,5.459,337,1.808,366,1.808,395,1.601,422,1.808,423,1.808,464,1.808,465,1.808,466,1.219,467,1.808,468,1.808,470,1.808,471,2.501,474,1.808,475,2.501,493,1.446,494,1.808,496,1.808,504,1.054,505,1.808,523,1.322,524,2.501,525,2.501,528,1.322,529,2.501,532,2.175,533,1.446,534,1.808,556,1.446,574,1.322,575,1.446,576,1.446,577,1.446,578,1.322,580,1.219,601,1.808,628,1.808,629,1.808,644,2.501,646,1.808,654,1.601,667,1.446,668,1.808,677,1.446,680,1.219,684,1.446,685,1.601,686,1.322,688,1.219,700,1.601,701,1.808,702,1.808,704,1.131,714,1.808,746,1.808,770,2.875,771,1.808,776,1.322,778,1.808,785,1.601,787,1.322,789,1.446,790,1.808,800,1.601,816,1.808,828,1.808,829,2.123,830,2.123,831,3.93,832,3.477,833,6.143,834,7.031,835,1.808,836,1.808,837,2.123,838,6.242,839,4.614,840,3.078,841,1.808,842,1.808,843,2.825,844,2.123,845,2.123,846,1.808,847,1.808,848,3.317,849,1.808,850,1.808,851,2.123,852,1.808,853,1.808,854,3.078,855,3.078,856,1.808,857,1.808,858,1.808,859,2.123,860,2.123]],["title/dependencies.html",[82,2.102,861,2.501]],["body/dependencies.html",[19,0.023,30,0.858,35,1.154,37,3.631,77,0.017,78,0.017,82,2.117,98,0.048,144,2.904,149,1.979,164,3.215,166,2.449,168,1.855,233,3.631,234,1.742,235,2.655,307,3.215,311,3.215,314,2.655,420,3.215,434,3.631,483,4.538,501,3.631,862,6.558,863,4.263,864,4.263,865,4.263,866,4.263,867,4.263,868,4.263,869,4.263,870,4.263,871,4.263,872,4.263,873,4.263,874,4.263,875,4.263,876,4.263,877,4.263,878,4.263,879,4.263,880,4.263,881,4.263,882,4.263,883,4.263,884,4.263,885,4.263,886,4.263]],["title/miscellaneous/enumerations.html",[887,1.687,888,3.605]],["body/miscellaneous/enumerations.html",[8,0.622,19,0.022,20,2.607,77,0.019,78,0.019,101,3.374,217,4.268,387,4.517,395,3.735,417,5.103,418,5.103,419,5.103,840,4.517,887,2.845,888,4.219,889,4.219,890,4.953,891,5.991,892,5.991]],["title/miscellaneous/functions.html",[887,1.687,893,3.605]],["body/miscellaneous/functions.html",[1,4.636,6,2.42,7,4.784,8,0.403,10,1.782,17,1.331,18,0.89,19,0.022,40,3.551,48,2.734,49,5.404,65,2.734,68,2.734,70,2.734,72,2.734,74,2.734,77,0.014,78,0.014,200,2.12,201,1.408,205,2.086,211,4.411,217,1.999,294,3.071,452,2.42,575,3.071,576,3.071,577,3.071,578,2.809,785,3.4,846,2.734,847,4.44,849,2.734,850,3.841,852,3.841,853,3.841,854,2.42,855,3.931,856,3.841,857,2.734,858,3.841,887,1.843,893,2.734,894,5.261,895,3.21,896,3.841,897,3.21,898,3.21,899,6.177,900,3.21,901,6.345,902,3.21,903,3.21,904,3.21]],["title/index.html",[8,0.442,905,2.997]],["body/index.html",[2,2.369,19,0.022,77,0.015,78,0.015,80,4.499,81,1.727,82,2.367,83,2.963,84,2.963,85,4.173,86,4.114,87,3.894,88,2.739,89,1.998,90,1.998,96,1.853,100,1.338,113,1.727,154,4.353,155,2.963,156,2.963,157,2.963,158,3.22,159,3.389,160,3.389,169,3.011,183,1.422,263,2.963,298,2.963,300,2.963,301,2.963,580,3.725,595,2.963,596,2.963,597,2.963,645,2.623,688,3.725,704,3.456,811,2.963,812,2.963,813,2.963,905,2.963,906,3.479,907,4.062,908,3.479,909,3.479,910,2.963]],["title/modules.html",[81,2.386]],["body/modules.html",[19,0.019,77,0.019,78,0.019,80,3.467,81,2.527,85,3.171,86,3.171,87,2.924,154,3.171,911,6.904,912,6.904,913,6.904,914,6.904]],["title/properties.html",[9,1.286,861,2.501]],["body/properties.html",[9,1.645,11,1.743,19,0.022,77,0.02,78,0.02,371,3.686,915,5.412,916,5.412,917,5.412,918,5.412]],["title/miscellaneous/variables.html",[887,1.687,919,3.605]],["body/miscellaneous/variables.html",[8,0.263,9,1.604,11,1.971,12,1.749,15,2.62,17,1.499,18,0.928,19,0.023,20,1.428,38,2.475,50,0.505,62,0.567,77,0.01,78,0.01,101,1.427,104,0.601,115,0.912,118,1.466,201,0.702,216,4.17,217,3.813,237,2.236,251,1.785,266,1.785,281,1.885,291,2.236,388,1.58,430,1.785,433,4.237,435,1.785,442,3.454,444,3.751,448,3.751,450,2.475,451,2.475,462,2.475,519,2.236,556,2.236,565,3.12,574,2.045,584,1.427,623,1.427,637,1.785,639,1.785,652,1.58,654,2.475,672,2.796,674,5.214,681,1.58,684,2.236,685,2.475,708,1.785,795,2.475,800,2.475,831,2.796,832,3.902,835,2.796,836,2.796,840,3.454,841,1.785,842,2.796,843,1.785,854,1.58,855,2.475,887,1.203,889,3.447,894,3.902,896,1.785,907,1.785,910,1.785,919,1.785,920,2.095,921,3.283,922,2.095,923,2.095,924,2.095,925,4.048,926,4.048,927,3.283,928,2.095,929,2.095,930,2.095,931,2.095,932,2.095,933,2.095,934,2.095,935,2.095,936,2.095,937,2.095,938,2.095,939,2.095,940,2.095,941,4.581,942,2.095,943,3.283,944,2.095,945,2.095,946,2.095,947,2.095,948,2.095,949,2.095,950,2.095,951,2.095,952,2.095,953,2.095,954,2.095,955,4.581,956,2.095,957,2.095,958,4.048,959,3.283,960,3.283,961,3.283,962,3.283,963,3.283,964,2.095,965,3.283,966,2.095,967,2.095,968,2.095,969,2.095,970,2.095,971,2.095,972,2.095,973,2.095,974,3.283,975,3.283,976,2.095,977,2.095,978,2.095,979,2.095,980,2.095,981,2.095,982,2.095]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"modules/AppModule.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":334,"title":{},"body":{"modules/CoreModule.html":{},"entities/Product.html":{},"coverage.html":{}}}],["0.0.1",{"_index":915,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["0.3.10",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":848,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":845,"title":{},"body":{"coverage.html":{}}}],["0})@column",{"_index":516,"title":{},"body":{"entities/Product.html":{}}}],["1",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":263,"title":{},"body":{"injectables/AuthenticationService.html":{},"index.html":{}}}],["11",{"_index":909,"title":{},"body":{"index.html":{}}}],["2",{"_index":910,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["2.2.0",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":907,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["3.0.0",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":637,"title":{},"body":{"entities/Role.html":{},"miscellaneous/variables.html":{}}}],["32)@index({unique",{"_index":635,"title":{},"body":{"entities/Role.html":{}}}],["4",{"_index":908,"title":{},"body":{"index.html":{}}}],["4.0.0",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":906,"title":{},"body":{"index.html":{}}}],["5.1.0",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.0.0",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["abc1234",{"_index":744,"title":{},"body":{"injectables/SessionService.html":{}}}],["access",{"_index":122,"title":{},"body":{"entities/Authentication.html":{},"controllers/SessionController.html":{}}}],["accessors",{"_index":367,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["account",{"_index":670,"title":{},"body":{"controllers/SessionController.html":{}}}],["address",{"_index":764,"title":{},"body":{"entities/User.html":{}}}],["address'})@isemail()@column",{"_index":752,"title":{},"body":{"entities/User.html":{}}}],["admin",{"_index":891,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["admin@admin.com",{"_index":740,"title":{},"body":{"injectables/SessionService.html":{}}}],["affected",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["all_roles",{"_index":556,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["all_roles_except",{"_index":800,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["all_roles_except(authrole.regular",{"_index":803,"title":{},"body":{"controllers/UsersController.html":{}}}],["along",{"_index":675,"title":{},"body":{"controllers/SessionController.html":{}}}],["already",{"_index":272,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["api",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api_endpoints",{"_index":574,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_endpoints.products.by_id",{"_index":588,"title":{},"body":{"controllers/ProductsController.html":{}}}],["api_endpoints.users.by_id",{"_index":808,"title":{},"body":{"controllers/UsersController.html":{}}}],["api_endpoints.users.session.base_path",{"_index":691,"title":{},"body":{"controllers/SessionController.html":{}}}],["api_endpoints.users.session.log_in",{"_index":693,"title":{},"body":{"controllers/SessionController.html":{}}}],["api_endpoints.users.session.sign_up",{"_index":697,"title":{},"body":{"controllers/SessionController.html":{}}}],["api_params",{"_index":835,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_params.by_id",{"_index":927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api_responses",{"_index":38,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_versions",{"_index":685,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_versions.v1",{"_index":692,"title":{},"body":{"controllers/SessionController.html":{}}}],["apibearerauth",{"_index":31,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["apibody",{"_index":683,"title":{},"body":{"controllers/SessionController.html":{}}}],["apidelete",{"_index":575,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apidelete(params",{"_index":74,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"miscellaneous/functions.html":{}}}],["apidelete({path",{"_index":550,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apiget",{"_index":576,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apiget(params",{"_index":68,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"miscellaneous/functions.html":{}}}],["apiget({path",{"_index":561,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apiget({roles",{"_index":555,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apimethod",{"_index":852,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["apimethod(params",{"_index":48,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"miscellaneous/functions.html":{}}}],["apimethodparams",{"_index":1,"title":{"interfaces/ApiMethodParams.html":{}},"body":{"interfaces/ApiMethodParams.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apiokresponse",{"_index":32,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["apiokresponse(api_responses.deletion",{"_index":76,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["apioperation",{"_index":33,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["apiparam",{"_index":572,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apipatch",{"_index":577,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apipatch(params",{"_index":70,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"miscellaneous/functions.html":{}}}],["apipatch({path",{"_index":566,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apipost",{"_index":578,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apipost(params",{"_index":65,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"miscellaneous/functions.html":{}}}],["apipost({path",{"_index":669,"title":{},"body":{"controllers/SessionController.html":{}}}],["apipost({roles",{"_index":541,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":109,"title":{},"body":{"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"classes/AuthenticationSignUpDto.html":{},"entities/Product.html":{},"entities/Role.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserSignUpDto.html":{}}}],["apiproperty({description",{"_index":121,"title":{},"body":{"entities/Authentication.html":{},"entities/Product.html":{},"entities/Role.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{}}}],["apiproperty({type",{"_index":106,"title":{},"body":{"classes/AuthTokenResponse.html":{}}}],["apipropertyoptional",{"_index":760,"title":{},"body":{"entities/User.html":{}}}],["apipropertyoptional({type",{"_index":747,"title":{},"body":{"entities/User.html":{}}}],["apiput",{"_index":853,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["apiput(params",{"_index":72,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"miscellaneous/functions.html":{}}}],["apiresponse",{"_index":34,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["apiresponse(api_responses.common_error",{"_index":59,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["apiresponseoptions",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apitags",{"_index":573,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["apitags('products",{"_index":582,"title":{},"body":{"controllers/ProductsController.html":{}}}],["apitags('session",{"_index":690,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags('users",{"_index":801,"title":{},"body":{"controllers/UsersController.html":{}}}],["app_filter",{"_index":308,"title":{},"body":{"modules/CoreModule.html":{}}}],["app_interceptor",{"_index":309,"title":{},"body":{"modules/CoreModule.html":{}}}],["app_pipe",{"_index":310,"title":{},"body":{"modules/CoreModule.html":{}}}],["applydecorators",{"_index":22,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["applydecorators(...decorators",{"_index":63,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["applydecorators(delete(params?.path",{"_index":75,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["applydecorators(get(params?.path",{"_index":69,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["applydecorators(patch(params?.path",{"_index":71,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["applydecorators(post(params?.path",{"_index":66,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["applydecorators(put(params?.path",{"_index":73,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["appmodule",{"_index":80,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["argumentshost",{"_index":428,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":186,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":150,"title":{},"body":{"entities/Authentication.html":{},"classes/UserAuthTokenDto.html":{},"coverage.html":{}}}],["auth.decorator.ts",{"_index":842,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.guard.ts",{"_index":471,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.strategy.ts",{"_index":475,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:11",{"_index":477,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth.strategy.ts:12",{"_index":500,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["auth.strategy.ts:23",{"_index":479,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth.strategy.ts:8",{"_index":498,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["auth_role_values",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Role.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_role_values.filter((role",{"_index":922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth_role_values.find((e",{"_index":642,"title":{},"body":{"entities/Role.html":{}}}],["authentication",{"_index":104,"title":{"entities/Authentication.html":{}},"body":{"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authentication.id",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authentication.identifier",{"_index":260,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authentication.passwordhash",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authentication.roles.find((role",{"_index":662,"title":{},"body":{"guards/RolesGuard.html":{}}}],["authentication/authentication.module",{"_index":320,"title":{},"body":{"modules/CoreModule.html":{}}}],["authentication/constants",{"_index":43,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtAuthStrategy.html":{},"controllers/ProductsController.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["authentication/decorators",{"_index":42,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["authentication/dto",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authentication/entities",{"_index":111,"title":{},"body":{"classes/AuthTokenResponse.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["authentication/entities/authentication.entity",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{}}}],["authentication/guards",{"_index":46,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"controllers/SessionController.html":{}}}],["authentication/services",{"_index":484,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/SessionService.html":{}}}],["authenticationmodule",{"_index":154,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"index.html":{},"modules.html":{}}}],["authenticationservice",{"_index":158,"title":{"injectables/AuthenticationService.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/SessionService.html":{},"coverage.html":{},"index.html":{}}}],["authenticationsignupdto",{"_index":208,"title":{"classes/AuthenticationSignUpDto.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"coverage.html":{}}}],["authentication})@exclude()@onetoone(undefined",{"_index":748,"title":{},"body":{"entities/User.html":{}}}],["authguard",{"_index":472,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":473,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":495,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authid",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/IDecodedToken.html":{}}}],["author",{"_index":918,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":707,"title":{},"body":{"guards/SessionGuard.html":{}}}],["authorization.identifier",{"_index":712,"title":{},"body":{"guards/SessionGuard.html":{}}}],["authrepository",{"_index":202,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authrole",{"_index":20,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"injectables/AuthenticationService.html":{},"controllers/ProductsController.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authrole.admin",{"_index":584,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["authrole.regular",{"_index":266,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":476,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/SessionService.html":{}}}],["authtoken",{"_index":105,"title":{},"body":{"classes/AuthTokenResponse.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionService.html":{},"classes/UserAuthTokenDto.html":{}}}],["authtokenresponse",{"_index":99,"title":{"classes/AuthTokenResponse.html":{}},"body":{"classes/AuthTokenResponse.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionController.html":{},"coverage.html":{}}}],["autoloadentities",{"_index":363,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["await",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["badrequestexception",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["badrequestexception('invalid",{"_index":287,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["base_path",{"_index":925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["basic",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["basic_message",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["bcrypt.compare(plaintextpassword",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["bcrypt.hash(dto.plaintextpassword",{"_index":262,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":565,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":388,"title":{},"body":{"injectables/EnvironmentService.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":847,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brief",{"_index":508,"title":{},"body":{"entities/Product.html":{}}}],["browse",{"_index":914,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":911,"title":{},"body":{"modules.html":{}}}],["bruce",{"_index":742,"title":{},"body":{"injectables/SessionService.html":{}}}],["by_id",{"_index":926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["by_user",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["call",{"_index":952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["called",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":647,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SessionGuard.html":{}}}],["canactivate(context",{"_index":651,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SessionGuard.html":{}}}],["case",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":425,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":427,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["character",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":98,"title":{"classes/AuthTokenResponse.html":{},"classes/AuthenticationSignUpDto.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{}},"body":{"modules/AppModule.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":100,"title":{},"body":{"classes/AuthTokenResponse.html":{},"classes/AuthenticationSignUpDto.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"index.html":{}}}],["classserializerinterceptor",{"_index":303,"title":{},"body":{"modules/CoreModule.html":{}}}],["cluster_appmodule",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authenticationmodule",{"_index":155,"title":{},"body":{"modules/AuthenticationModule.html":{},"index.html":{}}}],["cluster_authenticationmodule_exports",{"_index":157,"title":{},"body":{"modules/AuthenticationModule.html":{},"index.html":{}}}],["cluster_authenticationmodule_providers",{"_index":156,"title":{},"body":{"modules/AuthenticationModule.html":{},"index.html":{}}}],["cluster_coremodule",{"_index":298,"title":{},"body":{"modules/CoreModule.html":{},"index.html":{}}}],["cluster_coremodule_exports",{"_index":300,"title":{},"body":{"modules/CoreModule.html":{},"index.html":{}}}],["cluster_coremodule_imports",{"_index":299,"title":{},"body":{"modules/CoreModule.html":{}}}],["cluster_coremodule_providers",{"_index":301,"title":{},"body":{"modules/CoreModule.html":{},"index.html":{}}}],["cluster_productsmodule",{"_index":595,"title":{},"body":{"modules/ProductsModule.html":{},"index.html":{}}}],["cluster_productsmodule_exports",{"_index":597,"title":{},"body":{"modules/ProductsModule.html":{},"index.html":{}}}],["cluster_productsmodule_imports",{"_index":598,"title":{},"body":{"modules/ProductsModule.html":{}}}],["cluster_productsmodule_providers",{"_index":596,"title":{},"body":{"modules/ProductsModule.html":{},"index.html":{}}}],["cluster_usersmodule",{"_index":811,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_exports",{"_index":813,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_providers",{"_index":812,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["code",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":145,"title":{},"body":{"entities/Authentication.html":{},"entities/Product.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["common.decorator.ts",{"_index":7,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["common_error",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":325,"title":{},"body":{"modules/CoreModule.html":{}}}],["configmodule",{"_index":306,"title":{},"body":{"modules/CoreModule.html":{}}}],["configmodule.forroot",{"_index":323,"title":{},"body":{"modules/CoreModule.html":{}}}],["configservice",{"_index":373,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["confirmpassword",{"_index":745,"title":{},"body":{"injectables/SessionService.html":{},"classes/UserSignUpDto.html":{}}}],["conflictexception",{"_index":228,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["conflictexception('a",{"_index":271,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["console.error(exception",{"_index":436,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["console.info('authentication",{"_index":278,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["console.log(user",{"_index":806,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":50,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"modules/CoreModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/ProductCreateDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"classes/UserCreateDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":316,"title":{},"body":{"modules/CoreModule.html":{}}}],["constructor",{"_index":194,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["constructor(authrepository",{"_index":195,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["constructor(authservice",{"_index":497,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["constructor(configservice",{"_index":372,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["constructor(environmentservice",{"_index":341,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{}}}],["constructor(private",{"_index":351,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(productsrepository",{"_index":603,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(reflector",{"_index":648,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(usersrepository",{"_index":716,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":703,"title":{},"body":{"guards/SessionGuard.html":{}}}],["contain",{"_index":971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["containing",{"_index":135,"title":{},"body":{"entities/Authentication.html":{},"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"classes/UserAuthTokenDto.html":{},"controllers/UsersController.html":{}}}],["context",{"_index":439,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{}}}],["context.getclass",{"_index":658,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":657,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getrequest",{"_index":443,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["context.getresponse",{"_index":441,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["context.switchtohttp().getrequest",{"_index":659,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SessionGuard.html":{}}}],["controller",{"_index":532,"title":{"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller(api_endpoints.products.base_path",{"_index":583,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller(api_endpoints.users.base_path",{"_index":802,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["core/constants",{"_index":39,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"injectables/EnvironmentService.html":{},"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["core/core.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["core/services",{"_index":170,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthStrategy.html":{}}}],["coremodule",{"_index":85,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"index.html":{},"modules.html":{}}}],["coverage",{"_index":828,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":535,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":585,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["create(dto",{"_index":540,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create.dto.ts",{"_index":525,"title":{},"body":{"classes/ProductCreateDto.html":{},"classes/UserCreateDto.html":{},"coverage.html":{}}}],["created",{"_index":546,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["createparamdecorator((data",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":671,"title":{},"body":{"controllers/SessionController.html":{}}}],["createtypeormoptions",{"_index":340,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["credentials",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/SessionController.html":{}}}],["ctx",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentauth",{"_index":684,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":281,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/IHttpResponse.html":{},"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":277,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/DatabaseService.html":{},"classes/EnvironmentVariables.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["database_name",{"_index":396,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_password",{"_index":397,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_port",{"_index":398,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["database_username",{"_index":399,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["databaseservice",{"_index":319,"title":{"injectables/DatabaseService.html":{}},"body":{"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"coverage.html":{}}}],["date().toisostring",{"_index":463,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["decorators",{"_index":54,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"classes/AuthenticationSignUpDto.html":{},"classes/EnvironmentVariables.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"entities/Role.html":{},"controllers/SessionController.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserSignUpDto.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Product.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":107,"title":{},"body":{"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserSignUpDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":23,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"controllers/ProductsController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{}}}],["deletebyid",{"_index":536,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletebyid(@param('id",{"_index":593,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["deletebyid(id",{"_index":549,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleted",{"_index":552,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["deletes",{"_index":551,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["deletion",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":82,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":11,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"entities/Authentication.html":{},"classes/AuthenticationSignUpDto.html":{},"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"entities/Role.html":{},"controllers/SessionController.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserSignUpDto.html":{},"controllers/UsersController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":417,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["documentation",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":666,"title":{},"body":{"guards/RolesGuard.html":{}}}],["dto",{"_index":210,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.email",{"_index":727,"title":{},"body":{"injectables/SessionService.html":{}}}],["dto.firstname",{"_index":731,"title":{},"body":{"injectables/SessionService.html":{}}}],["dto.identifier",{"_index":268,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["dto.lastname",{"_index":733,"title":{},"body":{"injectables/SessionService.html":{}}}],["dto.password",{"_index":728,"title":{},"body":{"injectables/SessionService.html":{}}}],["e",{"_index":643,"title":{},"body":{"entities/Role.html":{}}}],["e.authrole",{"_index":769,"title":{},"body":{"entities/User.html":{}}}],["eager",{"_index":140,"title":{},"body":{"entities/Authentication.html":{},"entities/User.html":{}}}],["email",{"_index":125,"title":{},"body":{"entities/Authentication.html":{},"injectables/LocalAuthStrategy.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{}}}],["enableimplicitconversion",{"_index":329,"title":{},"body":{"modules/CoreModule.html":{}}}],["endpoints",{"_index":773,"title":{},"body":{"classes/UserAuthTokenDto.html":{}}}],["endpoints.constants.ts",{"_index":832,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":113,"title":{},"body":{"entities/Authentication.html":{},"modules/AuthenticationModule.html":{},"entities/Product.html":{},"modules/ProductsModule.html":{},"entities/Role.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["entity",{"_index":112,"title":{"entities/Authentication.html":{},"entities/Product.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Authentication.html":{},"entities/Product.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":138,"title":{},"body":{"entities/Authentication.html":{},"classes/EnvironmentVariables.html":{}}}],["enumerations",{"_index":888,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":387,"title":{},"body":{"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["environment.development",{"_index":390,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["environment.production",{"_index":392,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["environment.test",{"_index":391,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["environment/environment.service",{"_index":349,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["environmentservice",{"_index":169,"title":{"injectables/EnvironmentService.html":{}},"body":{"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["environmentservice.get('jwt_expiration_time",{"_index":180,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["environmentservice.get('jwt_secret",{"_index":177,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthStrategy.html":{}}}],["environmentservice.isproduction",{"_index":491,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["environmentvariables",{"_index":315,"title":{"classes/EnvironmentVariables.html":{}},"body":{"modules/CoreModule.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"coverage.html":{}}}],["err",{"_index":269,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["err.message",{"_index":273,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["error",{"_index":448,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IHttpResponse.html":{},"miscellaneous/variables.html":{}}}],["error(errors.tostring",{"_index":335,"title":{},"body":{"modules/CoreModule.html":{}}}],["errors",{"_index":330,"title":{},"body":{"modules/CoreModule.html":{}}}],["errors.length",{"_index":333,"title":{},"body":{"modules/CoreModule.html":{}}}],["etc",{"_index":152,"title":{},"body":{"entities/Authentication.html":{}}}],["etc.'})@exclude()@column({unique",{"_index":127,"title":{},"body":{"entities/Authentication.html":{}}}],["exception",{"_index":430,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["exception.filter.ts",{"_index":423,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:6",{"_index":426,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:9",{"_index":429,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":454,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":455,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.name",{"_index":456,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":459,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":424,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionresponse",{"_index":453,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionresponse['error",{"_index":457,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionresponse['message",{"_index":458,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":143,"title":{},"body":{"entities/Authentication.html":{},"entities/User.html":{}}}],["exclude()@primarygeneratedcolumn",{"_index":119,"title":{},"body":{"entities/Authentication.html":{}}}],["executioncontext",{"_index":652,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["existence",{"_index":522,"title":{},"body":{"entities/Product.html":{}}}],["existence'})@column",{"_index":520,"title":{},"body":{"entities/Product.html":{}}}],["exists",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionService.html":{}}}],["expiresin",{"_index":179,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["export",{"_index":64,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"modules/AppModule.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":162,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":434,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":296,"title":{},"body":{"classes/AuthenticationSignUpDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{}}}],["extractjwt",{"_index":481,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":488,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["false",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"injectables/SessionService.html":{}}}],["field",{"_index":783,"title":{},"body":{"classes/UserSignUpDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"modules/AppModule.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filters",{"_index":318,"title":{},"body":{"modules/CoreModule.html":{}}}],["find",{"_index":537,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["find(@currentauth",{"_index":805,"title":{},"body":{"controllers/UsersController.html":{}}}],["find(options",{"_index":608,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["find(user",{"_index":794,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyid",{"_index":538,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["findbyid(@param('id",{"_index":589,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["findbyid(id",{"_index":560,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["findmanyoptions",{"_index":609,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":602,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["findone(options",{"_index":611,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["findoneoptions",{"_index":612,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["first",{"_index":710,"title":{},"body":{"guards/SessionGuard.html":{},"entities/User.html":{}}}],["firstname",{"_index":730,"title":{},"body":{"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserCreateDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{}}}],["forbiddenexception",{"_index":615,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception(err.name",{"_index":619,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":623,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["fullname",{"_index":765,"title":{},"body":{"entities/User.html":{}}}],["function",{"_index":47,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"coverage.html":{}}}],["functions",{"_index":893,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["general",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generate",{"_index":214,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["get(key",{"_index":375,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["getisdevelopment",{"_index":379,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["getisproduction",{"_index":383,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["getistesting",{"_index":381,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["getversion",{"_index":385,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["global",{"_index":304,"title":{},"body":{"modules/CoreModule.html":{}}}],["guard",{"_index":644,"title":{"guards/RolesGuard.html":{},"guards/SessionGuard.html":{}},"body":{"coverage.html":{}}}],["guard.decorator.ts",{"_index":850,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["guard.guard.ts",{"_index":702,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["guard.guard.ts:10",{"_index":706,"title":{},"body":{"guards/SessionGuard.html":{}}}],["guard.guard.ts:7",{"_index":705,"title":{},"body":{"guards/SessionGuard.html":{}}}],["guards",{"_index":645,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SessionGuard.html":{},"index.html":{}}}],["happened",{"_index":449,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["hashed",{"_index":130,"title":{},"body":{"entities/Authentication.html":{}}}],["hashedpassword",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hasrole",{"_index":660,"title":{},"body":{"guards/RolesGuard.html":{}}}],["host",{"_index":361,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":440,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":24,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["httpcode(httpstatus.ok",{"_index":67,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["httpexception",{"_index":432,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":317,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"modules/CoreModule.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpstatus",{"_index":25,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":445,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["human",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":115,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["idecodedtoken",{"_index":223,"title":{"interfaces/IDecodedToken.html":{}},"body":{"injectables/AuthenticationService.html":{},"interfaces/IDecodedToken.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["identifier",{"_index":116,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"interfaces/IDecodedToken.html":{},"entities/Role.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"coverage.html":{}}}],["identifier'})@primarygeneratedcolumn",{"_index":756,"title":{},"body":{"entities/User.html":{}}}],["ignoreexpiration",{"_index":490,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["ihttpresponse",{"_index":466,"title":{"interfaces/IHttpResponse.html":{}},"body":{"interfaces/IHttpResponse.html":{},"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["implements",{"_index":350,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/HttpExceptionFilter.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{}}}],["import",{"_index":21,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"modules/AppModule.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/ApiMethodParams.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserSignUpDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"modules/AppModule.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":547,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"classes/UserAuthTokenDto.html":{},"controllers/UsersController.html":{}}}],["inject",{"_index":174,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["injectable",{"_index":182,"title":{"injectables/AuthenticationService.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":183,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["injectrepository",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(authentication",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["injectrepository(product",{"_index":616,"title":{},"body":{"injectables/ProductsService.html":{}}}],["injectrepository(role",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["injectrepository(user",{"_index":725,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["instanceof",{"_index":438,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiMethodParams.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{}},"body":{"interfaces/ApiMethodParams.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"index.html":{}}}],["internal",{"_index":446,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["internalservererrorexception",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["internalservererrorexception('could",{"_index":275,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isadmin",{"_index":721,"title":{},"body":{"injectables/SessionService.html":{}}}],["isarray",{"_index":137,"title":{},"body":{"entities/Authentication.html":{}}}],["isdevelopment",{"_index":368,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["isemail",{"_index":761,"title":{},"body":{"entities/User.html":{}}}],["isenum",{"_index":416,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isenum(environment",{"_index":411,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["ishttpexception",{"_index":437,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["isint",{"_index":406,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["isnumber",{"_index":413,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["ispassword",{"_index":294,"title":{},"body":{"classes/AuthenticationSignUpDto.html":{},"classes/UserSignUpDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ispassword()@apiproperty({description",{"_index":290,"title":{},"body":{"classes/AuthenticationSignUpDto.html":{},"classes/UserSignUpDto.html":{}}}],["ispassword(validationoptions",{"_index":900,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isproduction",{"_index":370,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["isstring",{"_index":403,"title":{},"body":{"classes/EnvironmentVariables.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["istesting",{"_index":369,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["items",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joincolumn",{"_index":763,"title":{},"body":{"entities/User.html":{}}}],["jointable",{"_index":146,"title":{},"body":{"entities/Authentication.html":{}}}],["js",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["jwt",{"_index":420,"title":{},"body":{"classes/EnvironmentVariables.html":{},"injectables/JwtAuthStrategy.html":{},"dependencies.html":{}}}],["jwt_expiration_time",{"_index":400,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwt_secret",{"_index":401,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["jwtauthguard",{"_index":44,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"interfaces/ApiMethodParams.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtauthstrategy",{"_index":159,"title":{"injectables/JwtAuthStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["jwtfromrequest",{"_index":487,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["jwtmodule",{"_index":163,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.registerasync",{"_index":173,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtservice",{"_index":198,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["k",{"_index":376,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["key",{"_index":153,"title":{},"body":{"entities/Authentication.html":{},"injectables/EnvironmentService.html":{},"entities/Role.html":{}}}],["key'})@exclude()@column",{"_index":131,"title":{},"body":{"entities/Authentication.html":{}}}],["key'})@primarygeneratedcolumn('increment",{"_index":632,"title":{},"body":{"entities/Role.html":{}}}],["last",{"_index":758,"title":{},"body":{"entities/User.html":{}}}],["lastname",{"_index":732,"title":{},"body":{"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserCreateDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{}}}],["leading",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["length",{"_index":639,"title":{},"body":{"entities/Role.html":{},"miscellaneous/variables.html":{}}}],["length(1",{"_index":641,"title":{},"body":{"entities/Role.html":{}}}],["letter",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":916,"title":{},"body":{"properties.html":{}}}],["list",{"_index":134,"title":{},"body":{"entities/Authentication.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["literal",{"_index":469,"title":{},"body":{"interfaces/IHttpResponse.html":{}}}],["local",{"_index":501,"title":{},"body":{"injectables/LocalAuthStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":493,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"controllers/SessionController.html":{},"coverage.html":{}}}],["localauthstrategy",{"_index":160,"title":{"injectables/LocalAuthStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["localhost",{"_index":362,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["lodash",{"_index":37,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"dependencies.html":{}}}],["log",{"_index":681,"title":{},"body":{"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["log_in",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logged",{"_index":673,"title":{},"body":{"controllers/SessionController.html":{},"classes/UserAuthTokenDto.html":{}}}],["login",{"_index":187,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["login(@currentauth",{"_index":695,"title":{},"body":{"controllers/SessionController.html":{}}}],["login(authentication",{"_index":203,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/SessionController.html":{}}}],["login(email",{"_index":719,"title":{},"body":{"injectables/SessionService.html":{}}}],["login.dto.ts",{"_index":778,"title":{},"body":{"classes/UserLogInDto.html":{},"coverage.html":{}}}],["longer",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["lower",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["many",{"_index":518,"title":{},"body":{"entities/Product.html":{}}}],["manytomany",{"_index":147,"title":{},"body":{"entities/Authentication.html":{}}}],["match",{"_index":782,"title":{},"body":{"classes/UserSignUpDto.html":{}}}],["matched",{"_index":562,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["matches",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["matching",{"_index":78,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"modules/AppModule.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matchproperty",{"_index":785,"title":{},"body":{"classes/UserSignUpDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["matchproperty('password",{"_index":786,"title":{},"body":{"classes/UserSignUpDto.html":{}}}],["matchproperty('password')@apiproperty({description",{"_index":781,"title":{},"body":{"classes/UserSignUpDto.html":{}}}],["matchproperty(property",{"_index":903,"title":{},"body":{"miscellaneous/functions.html":{}}}],["maximum",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messages",{"_index":450,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IHttpResponse.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["methoddecorator",{"_index":49,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"miscellaneous/functions.html":{}}}],["methods",{"_index":185,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":887,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":544,"title":{},"body":{"controllers/ProductsController.html":{},"classes/UserAuthTokenDto.html":{},"controllers/UsersController.html":{}}}],["models",{"_index":558,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["module",{"_index":79,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":81,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["mysql",{"_index":360,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/EnvironmentVariables.html":{}}}],["mysql2",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":201,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IHttpResponse.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name'})@column",{"_index":513,"title":{},"body":{"entities/Product.html":{}}}],["name'})@isstring()@column",{"_index":754,"title":{},"body":{"entities/User.html":{}}}],["name'})@isstring()@length(1",{"_index":634,"title":{},"body":{"entities/Role.html":{}}}],["nestjs/common",{"_index":30,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":307,"title":{},"body":{"modules/CoreModule.html":{},"injectables/EnvironmentService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":311,"title":{},"body":{"modules/CoreModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":164,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":166,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":35,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"classes/AuthenticationSignUpDto.html":{},"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"entities/Role.html":{},"controllers/SessionController.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":168,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newly",{"_index":545,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["node_env",{"_index":402,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["notfoundexception",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('authentication",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["notfoundexception('product",{"_index":622,"title":{},"body":{"injectables/ProductsService.html":{}}}],["notfoundexception('registry",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["notfoundexception('user",{"_index":737,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["null",{"_index":452,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/SessionService.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":118,"title":{},"body":{"entities/Authentication.html":{},"injectables/DatabaseService.html":{},"classes/EnvironmentVariables.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":674,"title":{},"body":{"controllers/SessionController.html":{},"miscellaneous/variables.html":{}}}],["object.values(authrole",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one",{"_index":972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onetoone",{"_index":762,"title":{},"body":{"entities/User.html":{}}}],["optional",{"_index":10,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"injectables/AuthenticationService.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IHttpResponse.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":421,"title":{},"body":{"classes/EnvironmentVariables.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["overview",{"_index":905,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":861,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":571,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":200,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":899,"title":{},"body":{"miscellaneous/functions.html":{}}}],["params.roles.map((e",{"_index":52,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["params?.description",{"_index":56,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["params?.responsedescription",{"_index":58,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["params?.responsetype",{"_index":57,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["params?.roles",{"_index":51,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["params?.summary",{"_index":55,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["partialtype",{"_index":530,"title":{},"body":{"classes/ProductUpdateDto.html":{},"classes/UserUpdateDto.html":{}}}],["partialtype(picktype(product",{"_index":531,"title":{},"body":{"classes/ProductUpdateDto.html":{}}}],["partialtype(picktype(user",{"_index":788,"title":{},"body":{"classes/UserUpdateDto.html":{}}}],["passport",{"_index":483,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":165,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":480,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{}}}],["passportstrategy(strategy",{"_index":485,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{}}}],["password",{"_index":338,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/SessionService.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{}}}],["password.decorator.ts",{"_index":855,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["password_description",{"_index":291,"title":{},"body":{"classes/AuthenticationSignUpDto.html":{},"classes/UserSignUpDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["passwordhash",{"_index":117,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{}}}],["patch",{"_index":26,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["path",{"_index":12,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IHttpResponse.html":{},"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtAuthStrategy.html":{}}}],["payload.authid",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["picktype",{"_index":293,"title":{},"body":{"classes/AuthenticationSignUpDto.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{}}}],["picktype(authentication",{"_index":297,"title":{},"body":{"classes/AuthenticationSignUpDto.html":{}}}],["picktype(product",{"_index":527,"title":{},"body":{"classes/ProductCreateDto.html":{}}}],["picktype(user",{"_index":777,"title":{},"body":{"classes/UserCreateDto.html":{},"classes/UserSignUpDto.html":{}}}],["picktype(usersignupdto",{"_index":780,"title":{},"body":{"classes/UserLogInDto.html":{}}}],["plaintextpassword",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"injectables/SessionService.html":{}}}],["plaintoinstance",{"_index":312,"title":{},"body":{"modules/CoreModule.html":{}}}],["plaintoinstance(environmentvariables",{"_index":328,"title":{},"body":{"modules/CoreModule.html":{}}}],["port",{"_index":339,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/EnvironmentVariables.html":{}}}],["post",{"_index":27,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["price",{"_index":506,"title":{},"body":{"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{}}}],["primary",{"_index":631,"title":{},"body":{"entities/Role.html":{}}}],["primarygeneratedcolumn",{"_index":148,"title":{},"body":{"entities/Authentication.html":{},"entities/Product.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('increment",{"_index":640,"title":{},"body":{"entities/Role.html":{}}}],["private",{"_index":190,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["product",{"_index":504,"title":{"entities/Product.html":{}},"body":{"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["product's",{"_index":512,"title":{},"body":{"entities/Product.html":{}}}],["product'})@column",{"_index":509,"title":{},"body":{"entities/Product.html":{}}}],["productcreatedto",{"_index":523,"title":{"classes/ProductCreateDto.html":{}},"body":{"classes/ProductCreateDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["production",{"_index":418,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["products",{"_index":519,"title":{},"body":{"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"miscellaneous/variables.html":{}}}],["products/dto",{"_index":579,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["products/entities",{"_index":526,"title":{},"body":{"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["products/products.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["products/services",{"_index":581,"title":{},"body":{"controllers/ProductsController.html":{}}}],["productscontroller",{"_index":533,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":86,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"index.html":{},"modules.html":{}}}],["productsrepository",{"_index":605,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productsservice",{"_index":580,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"index.html":{}}}],["productupdatedto",{"_index":528,"title":{"classes/ProductUpdateDto.html":{}},"body":{"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["product})@apiparam({name",{"_index":553,"title":{},"body":{"controllers/ProductsController.html":{}}}],["promise",{"_index":206,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":282,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/ApiMethodParams.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"classes/AuthenticationSignUpDto.html":{},"injectables/DatabaseService.html":{},"classes/EnvironmentVariables.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"entities/Product.html":{},"entities/Role.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserSignUpDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":904,"title":{},"body":{"miscellaneous/functions.html":{}}}],["property.decorator.ts",{"_index":858,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["protected",{"_index":772,"title":{},"body":{"classes/UserAuthTokenDto.html":{}}}],["provide",{"_index":321,"title":{},"body":{"modules/CoreModule.html":{}}}],["provided",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["purpose",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["put",{"_index":28,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["raw",{"_index":966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readable",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/DatabaseService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":326,"title":{},"body":{"modules/CoreModule.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":649,"title":{},"body":{"guards/RolesGuard.html":{}}}],["registry",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{}}}],["regular",{"_index":892,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["relations",{"_index":713,"title":{},"body":{"guards/SessionGuard.html":{},"injectables/SessionService.html":{}}}],["repository",{"_index":196,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ProductsService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["representing",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":442,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":461,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":708,"title":{},"body":{"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":124,"title":{},"body":{"entities/Authentication.html":{},"guards/RolesGuard.html":{},"classes/UserAuthTokenDto.html":{}}}],["requiredrole",{"_index":664,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles",{"_index":655,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((requiredrole",{"_index":661,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["response",{"_index":433,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["response.constant.ts",{"_index":103,"title":{},"body":{"classes/AuthTokenResponse.html":{},"coverage.html":{}}}],["response.constant.ts:6",{"_index":108,"title":{},"body":{"classes/AuthTokenResponse.html":{}}}],["response.constant.ts:9",{"_index":110,"title":{},"body":{"classes/AuthTokenResponse.html":{}}}],["response.interface.ts",{"_index":468,"title":{},"body":{"interfaces/IHttpResponse.html":{},"coverage.html":{}}}],["response.status(status).json",{"_index":460,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responsedescription",{"_index":13,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["responses.constant.ts",{"_index":836,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["responsetype",{"_index":14,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["result",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":77,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"modules/AppModule.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":557,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["return",{"_index":62,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":205,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":133,"title":{"entities/Role.html":{}},"body":{"entities/Authentication.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["role's",{"_index":630,"title":{},"body":{"entities/Role.html":{}}}],["role.constant.ts",{"_index":840,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.name",{"_index":663,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolename",{"_index":284,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["roles",{"_index":15,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"controllers/ProductsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(...params.roles",{"_index":61,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["roles.entity",{"_index":151,"title":{},"body":{"entities/Authentication.html":{}}}],["roles.entity.ts",{"_index":629,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["roles.entity.ts:10",{"_index":633,"title":{},"body":{"entities/Role.html":{}}}],["roles.entity.ts:17",{"_index":638,"title":{},"body":{"entities/Role.html":{}}}],["roles.includes(role",{"_index":923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roles.map(async",{"_index":283,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["roles_key",{"_index":654,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":45,"title":{"guards/RolesGuard.html":{}},"body":{"interfaces/ApiMethodParams.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesrepository",{"_index":197,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["role})@manytomany(undefined",{"_index":139,"title":{},"body":{"entities/Authentication.html":{}}}],["runtime",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["schema",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":176,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["secretorkey",{"_index":489,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["server",{"_index":447,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["services",{"_index":171,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["session",{"_index":672,"title":{},"body":{"controllers/SessionController.html":{},"miscellaneous/variables.html":{}}}],["sessioncontroller",{"_index":667,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["sessionguard",{"_index":700,"title":{"guards/SessionGuard.html":{}},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["sessionservice",{"_index":688,"title":{"injectables/SessionService.html":{}},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{}}}],["setmetadata(roles_key",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shared/decorators",{"_index":295,"title":{},"body":{"classes/AuthenticationSignUpDto.html":{},"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"classes/UserSignUpDto.html":{},"controllers/UsersController.html":{}}}],["sign",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sign_up",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":178,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["signup",{"_index":188,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["signup(@body",{"_index":698,"title":{},"body":{"controllers/SessionController.html":{}}}],["signup(body",{"_index":679,"title":{},"body":{"controllers/SessionController.html":{}}}],["signup(dto",{"_index":207,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionService.html":{}}}],["signup.dto",{"_index":779,"title":{},"body":{"classes/UserLogInDto.html":{}}}],["signup.dto.ts",{"_index":289,"title":{},"body":{"classes/AuthenticationSignUpDto.html":{},"classes/UserSignUpDto.html":{},"coverage.html":{}}}],["signup.dto.ts:12",{"_index":784,"title":{},"body":{"classes/UserSignUpDto.html":{}}}],["signup.dto.ts:8",{"_index":292,"title":{},"body":{"classes/AuthenticationSignUpDto.html":{},"classes/UserSignUpDto.html":{}}}],["skipmissingproperties",{"_index":332,"title":{},"body":{"modules/CoreModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"modules/AppModule.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["special",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api",{"_index":894,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":889,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../current",{"_index":920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.variables.ts",{"_index":890,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../is",{"_index":896,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":895,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../match",{"_index":897,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session",{"_index":898,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["src/core/constants/api",{"_index":831,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/constants/environment.variables.ts",{"_index":395,"title":{},"body":{"classes/EnvironmentVariables.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/core/constants/environment.variables.ts:12",{"_index":412,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/core/constants/environment.variables.ts:14",{"_index":415,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/core/constants/environment.variables.ts:16",{"_index":414,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/core/constants/environment.variables.ts:20",{"_index":410,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/core/constants/environment.variables.ts:22",{"_index":409,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/core/constants/environment.variables.ts:26",{"_index":404,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/core/constants/environment.variables.ts:28",{"_index":408,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/core/constants/environment.variables.ts:30",{"_index":405,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/core/constants/environment.variables.ts:32",{"_index":407,"title":{},"body":{"classes/EnvironmentVariables.html":{}}}],["src/core/constants/http",{"_index":467,"title":{},"body":{"interfaces/IHttpResponse.html":{},"coverage.html":{}}}],["src/core/core.module.ts",{"_index":302,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/filters/http",{"_index":422,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/services/database/database.service.ts",{"_index":337,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["src/core/services/database/database.service.ts:10",{"_index":342,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/core/services/database/database.service.ts:19",{"_index":343,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/core/services/database/database.service.ts:7",{"_index":345,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/core/services/database/database.service.ts:8",{"_index":347,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/core/services/database/database.service.ts:9",{"_index":346,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/core/services/environment/environment.service.ts",{"_index":366,"title":{},"body":{"injectables/EnvironmentService.html":{},"coverage.html":{}}}],["src/core/services/environment/environment.service.ts:10",{"_index":380,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["src/core/services/environment/environment.service.ts:14",{"_index":382,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["src/core/services/environment/environment.service.ts:18",{"_index":384,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["src/core/services/environment/environment.service.ts:22",{"_index":386,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["src/core/services/environment/environment.service.ts:26",{"_index":377,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["src/core/services/environment/environment.service.ts:7",{"_index":374,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["src/integrations/authentication/authentication.module.ts",{"_index":161,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/integrations/authentication/constants/auth",{"_index":101,"title":{},"body":{"classes/AuthTokenResponse.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/integrations/authentication/constants/decoded",{"_index":464,"title":{},"body":{"interfaces/IDecodedToken.html":{},"coverage.html":{}}}],["src/integrations/authentication/decorators/current",{"_index":841,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/integrations/authentication/decorators/roles.decorator.ts",{"_index":843,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/integrations/authentication/dto/authentication",{"_index":288,"title":{},"body":{"classes/AuthenticationSignUpDto.html":{},"coverage.html":{}}}],["src/integrations/authentication/entities/auth",{"_index":628,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/integrations/authentication/entities/authentication.entity.ts",{"_index":114,"title":{},"body":{"entities/Authentication.html":{},"coverage.html":{}}}],["src/integrations/authentication/entities/authentication.entity.ts:10",{"_index":120,"title":{},"body":{"entities/Authentication.html":{}}}],["src/integrations/authentication/entities/authentication.entity.ts:15",{"_index":129,"title":{},"body":{"entities/Authentication.html":{}}}],["src/integrations/authentication/entities/authentication.entity.ts:20",{"_index":132,"title":{},"body":{"entities/Authentication.html":{}}}],["src/integrations/authentication/entities/authentication.entity.ts:25",{"_index":142,"title":{},"body":{"entities/Authentication.html":{}}}],["src/integrations/authentication/guards/jwt",{"_index":470,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/integrations/authentication/guards/local",{"_index":494,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/integrations/authentication/guards/roles.guard.ts",{"_index":646,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/integrations/authentication/guards/roles.guard.ts:11",{"_index":653,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/integrations/authentication/guards/roles.guard.ts:8",{"_index":650,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/integrations/authentication/services/authentication/authentication.service.ts",{"_index":184,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/integrations/authentication/services/authentication/authentication.service.ts:21",{"_index":199,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/integrations/authentication/services/authentication/authentication.service.ts:30",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/integrations/authentication/services/authentication/authentication.service.ts:38",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/integrations/authentication/services/authentication/authentication.service.ts:44",{"_index":204,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/integrations/authentication/services/authentication/authentication.service.ts:54",{"_index":209,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/integrations/authentication/services/authentication/authentication.service.ts:73",{"_index":212,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/integrations/authentication/services/authentication/authentication.service.ts:79",{"_index":215,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/integrations/authentication/strategies/jwt",{"_index":474,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["src/integrations/authentication/strategies/local",{"_index":496,"title":{},"body":{"injectables/LocalAuthStrategy.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":846,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/products/controllers/products/products.controller.ts",{"_index":534,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/modules/products/controllers/products/products.controller.ts:23",{"_index":548,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/modules/products/controllers/products/products.controller.ts:35",{"_index":559,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/modules/products/controllers/products/products.controller.ts:49",{"_index":563,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/modules/products/controllers/products/products.controller.ts:63",{"_index":570,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/modules/products/controllers/products/products.controller.ts:77",{"_index":554,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/modules/products/dto/product",{"_index":524,"title":{},"body":{"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{},"coverage.html":{}}}],["src/modules/products/entities/product.entity.ts",{"_index":505,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/modules/products/entities/product.entity.ts:11",{"_index":514,"title":{},"body":{"entities/Product.html":{}}}],["src/modules/products/entities/product.entity.ts:15",{"_index":510,"title":{},"body":{"entities/Product.html":{}}}],["src/modules/products/entities/product.entity.ts:19",{"_index":517,"title":{},"body":{"entities/Product.html":{}}}],["src/modules/products/entities/product.entity.ts:23",{"_index":521,"title":{},"body":{"entities/Product.html":{}}}],["src/modules/products/entities/product.entity.ts:7",{"_index":511,"title":{},"body":{"entities/Product.html":{}}}],["src/modules/products/products.module.ts",{"_index":599,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/modules/products/services/products/products.service.ts",{"_index":601,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/modules/products/services/products/products.service.ts:10",{"_index":604,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/modules/products/services/products/products.service.ts:16",{"_index":606,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/modules/products/services/products/products.service.ts:23",{"_index":610,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/modules/products/services/products/products.service.ts:28",{"_index":613,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/modules/products/services/products/products.service.ts:34",{"_index":614,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/modules/products/services/products/products.service.ts:41",{"_index":607,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/modules/users/controllers/session/session.controller.ts",{"_index":668,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/modules/users/controllers/session/session.controller.ts:27",{"_index":678,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/modules/users/controllers/session/session.controller.ts:39",{"_index":682,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/modules/users/controllers/users/users.controller.ts",{"_index":790,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/controllers/users/users.controller.ts:25",{"_index":791,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users/users.controller.ts:38",{"_index":797,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users/users.controller.ts:53",{"_index":798,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users/users.controller.ts:67",{"_index":799,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users/users.controller.ts:81",{"_index":793,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/decorators/session",{"_index":849,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/users/dto/user",{"_index":770,"title":{},"body":{"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":746,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:13",{"_index":757,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:18",{"_index":753,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:23",{"_index":755,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:28",{"_index":759,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:34",{"_index":750,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/guards/session",{"_index":701,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["src/modules/users/services/session/session.service.ts",{"_index":714,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/modules/users/services/session/session.service.ts:12",{"_index":717,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/modules/users/services/session/session.service.ts:19",{"_index":722,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/modules/users/services/session/session.service.ts:39",{"_index":720,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/modules/users/services/session/session.service.ts:50",{"_index":723,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/modules/users/services/users/users.service.ts",{"_index":816,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/services/users/users.service.ts:11",{"_index":817,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users/users.service.ts:17",{"_index":818,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users/users.service.ts:24",{"_index":820,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users/users.service.ts:29",{"_index":821,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users/users.service.ts:35",{"_index":822,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users/users.service.ts:42",{"_index":819,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.module.ts",{"_index":814,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/shared/decorators/api",{"_index":6,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/decorators/is",{"_index":854,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/shared/decorators/match",{"_index":857,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stack",{"_index":451,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IHttpResponse.html":{},"miscellaneous/variables.html":{}}}],["startcase",{"_index":36,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["startcase(e)).join",{"_index":53,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["statements",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":444,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IHttpResponse.html":{},"miscellaneous/variables.html":{}}}],["stock",{"_index":507,"title":{},"body":{"entities/Product.html":{},"classes/ProductCreateDto.html":{},"classes/ProductUpdateDto.html":{}}}],["stores",{"_index":543,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["strategies",{"_index":172,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy",{"_index":482,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{}}}],["string",{"_index":17,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"entities/Role.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserSignUpDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["successfully",{"_index":280,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["summary",{"_index":16,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":486,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{}}}],["support",{"_index":912,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":913,"title":{},"body":{"modules.html":{}}}],["sync",{"_index":276,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["syncauthroles",{"_index":189,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["synced",{"_index":279,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["synchronize",{"_index":364,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["t",{"_index":378,"title":{},"body":{"injectables/EnvironmentService.html":{},"interfaces/IHttpResponse.html":{}}}],["table",{"_index":860,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":859,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":419,"title":{},"body":{"classes/EnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["testadmin",{"_index":715,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.authentication?.roles?.map((e",{"_index":768,"title":{},"body":{"entities/User.html":{}}}],["this.authrepository.create",{"_index":267,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.authrepository.findoneby",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.authservice.login(user.authentication",{"_index":738,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.authservice.signup",{"_index":726,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.authservice.validatebycredentials(email",{"_index":503,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["this.authservice.validatebytoken(payload",{"_index":492,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["this.configservice.get(key",{"_index":394,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["this.environmentservice.get('database_name",{"_index":353,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.environmentservice.get('database_password",{"_index":357,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.environmentservice.get('database_port",{"_index":359,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.environmentservice.get('database_username",{"_index":355,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.environmentservice.isproduction",{"_index":365,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/HttpExceptionFilter.html":{}}}],["this.firstname",{"_index":766,"title":{},"body":{"entities/User.html":{}}}],["this.get('node_env",{"_index":389,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["this.get('version').tostring",{"_index":393,"title":{},"body":{"injectables/EnvironmentService.html":{}}}],["this.jwtservice.sign",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.lastname",{"_index":767,"title":{},"body":{"entities/User.html":{}}}],["this.name",{"_index":352,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/Role.html":{}}}],["this.password",{"_index":356,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.port",{"_index":358,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.productsrepository.create(dto",{"_index":617,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.find(options",{"_index":620,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.findone(options",{"_index":621,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.findoneby",{"_index":626,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.preload",{"_index":624,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.remove(product",{"_index":627,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.update",{"_index":625,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.create(dto",{"_index":586,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.deletebyid(id",{"_index":594,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.find",{"_index":587,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findone",{"_index":590,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.updatebyid(id",{"_index":592,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":656,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.rolesrepository.findoneby",{"_index":285,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.rolesrepository.insert",{"_index":286,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.sessionservice.login(authentication.identifier",{"_index":696,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.signup(body",{"_index":699,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.signup",{"_index":741,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.username",{"_index":354,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.usersrepository.create",{"_index":729,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.find(options",{"_index":823,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":736,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.usersrepository.findone(options",{"_index":824,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":739,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.preload",{"_index":825,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.remove(user",{"_index":827,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update",{"_index":826,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(dto",{"_index":804,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deletebyid(id",{"_index":810,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.find",{"_index":807,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone",{"_index":711,"title":{},"body":{"guards/SessionGuard.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updatebyid(id",{"_index":809,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validateauthroles(roles",{"_index":265,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":462,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IHttpResponse.html":{},"miscellaneous/variables.html":{}}}],["to(this.authrepository.save(authentication",{"_index":270,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["to(this.productsrepository.save(product",{"_index":618,"title":{},"body":{"injectables/ProductsService.html":{}}}],["to(this.usersrepository.save(user",{"_index":734,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["to(this.validateauthroles(auth_role_values",{"_index":274,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["token",{"_index":102,"title":{},"body":{"classes/AuthTokenResponse.html":{},"controllers/SessionController.html":{},"classes/UserAuthTokenDto.html":{},"coverage.html":{}}}],["token.constant.ts",{"_index":465,"title":{},"body":{"interfaces/IDecodedToken.html":{},"coverage.html":{}}}],["token.dto.ts",{"_index":771,"title":{},"body":{"classes/UserAuthTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:6",{"_index":775,"title":{},"body":{"classes/UserAuthTokenDto.html":{}}}],["token.dto.ts:9",{"_index":774,"title":{},"body":{"classes/UserAuthTokenDto.html":{}}}],["transformer",{"_index":144,"title":{},"body":{"entities/Authentication.html":{},"modules/CoreModule.html":{},"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":128,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"injectables/DatabaseService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{}}}],["true})@column({length",{"_index":636,"title":{},"body":{"entities/Role.html":{}}}],["true})@joincolumn",{"_index":749,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable",{"_index":141,"title":{},"body":{"entities/Authentication.html":{}}}],["type",{"_index":18,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"classes/AuthTokenResponse.html":{},"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"classes/AuthenticationSignUpDto.html":{},"injectables/DatabaseService.html":{},"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDecodedToken.html":{},"interfaces/IHttpResponse.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserSignUpDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":149,"title":{},"body":{"entities/Authentication.html":{},"injectables/AuthenticationService.html":{},"entities/Product.html":{},"injectables/ProductsService.html":{},"entities/Role.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":167,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([authentication",{"_index":181,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":600,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":815,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":336,"title":{},"body":{"modules/CoreModule.html":{}}}],["typeormmoduleoptions",{"_index":344,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["typeormoptionsfactory",{"_index":348,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["types",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{}}}],["unauthorizedexception(\"you",{"_index":665,"title":{},"body":{"guards/RolesGuard.html":{}}}],["unauthorizedexception('wrong",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unauthorizedexception('you",{"_index":709,"title":{},"body":{"guards/SessionGuard.html":{}}}],["undefined",{"_index":542,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["undefined})@usesessionguard",{"_index":796,"title":{},"body":{"controllers/UsersController.html":{}}}],["unique",{"_index":123,"title":{},"body":{"entities/Authentication.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["unit",{"_index":515,"title":{},"body":{"entities/Product.html":{}}}],["unknown",{"_index":435,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":917,"title":{},"body":{"properties.html":{}}}],["up",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":567,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["update.dto.ts",{"_index":529,"title":{},"body":{"classes/ProductUpdateDto.html":{},"classes/UserUpdateDto.html":{},"coverage.html":{}}}],["updatebyid",{"_index":539,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatebyid(@param('id",{"_index":591,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["updatebyid(id",{"_index":564,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":569,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["updates",{"_index":568,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["upper",{"_index":973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useclass",{"_index":322,"title":{},"body":{"modules/CoreModule.html":{}}}],["usefactory",{"_index":175,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["useguards",{"_index":29,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"controllers/SessionController.html":{}}}],["useguards(jwtauthguard",{"_index":60,"title":{},"body":{"interfaces/ApiMethodParams.html":{}}}],["useguards(localauthguard",{"_index":694,"title":{},"body":{"controllers/SessionController.html":{}}}],["user",{"_index":136,"title":{"entities/User.html":{}},"body":{"entities/Authentication.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":751,"title":{},"body":{"entities/User.html":{}}}],["user.authentication",{"_index":735,"title":{},"body":{"injectables/SessionService.html":{}}}],["user/:user",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userauthtokendto",{"_index":686,"title":{"classes/UserAuthTokenDto.html":{}},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UserAuthTokenDto.html":{},"coverage.html":{}}}],["userauthtokendto})@useguards(localauthguard)@apibody({type",{"_index":676,"title":{},"body":{"controllers/SessionController.html":{}}}],["usercreatedto",{"_index":776,"title":{"classes/UserCreateDto.html":{}},"body":{"classes/UserCreateDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userlogindto",{"_index":677,"title":{"classes/UserLogInDto.html":{}},"body":{"controllers/SessionController.html":{},"classes/UserLogInDto.html":{},"coverage.html":{}}}],["username",{"_index":126,"title":{},"body":{"entities/Authentication.html":{},"injectables/DatabaseService.html":{}}}],["usernamefield",{"_index":502,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["users",{"_index":795,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["users/decorators",{"_index":41,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"controllers/UsersController.html":{}}}],["users/dto",{"_index":687,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users/entities",{"_index":724,"title":{},"body":{"injectables/SessionService.html":{},"classes/UserAuthTokenDto.html":{},"classes/UserCreateDto.html":{},"classes/UserSignUpDto.html":{},"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users/services",{"_index":689,"title":{},"body":{"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{}}}],["users/users.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{}}}],["userscontroller",{"_index":789,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersignupdto",{"_index":680,"title":{"classes/UserSignUpDto.html":{}},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UserLogInDto.html":{},"classes/UserSignUpDto.html":{},"coverage.html":{}}}],["usersmodule",{"_index":87,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersrepository",{"_index":718,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":704,"title":{"injectables/UsersService.html":{}},"body":{"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["userupdatedto",{"_index":787,"title":{"classes/UserUpdateDto.html":{}},"body":{"classes/UserUpdateDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user})@apiparam({name",{"_index":792,"title":{},"body":{"controllers/UsersController.html":{}}}],["usesessionguard",{"_index":40,"title":{},"body":{"interfaces/ApiMethodParams.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["v1",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v2",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v3",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid",{"_index":964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":324,"title":{},"body":{"modules/CoreModule.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/UserAuthTokenDto.html":{}}}],["validate(email",{"_index":499,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["validate(payload",{"_index":478,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["validateauthroles",{"_index":191,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validateauthroles(roles",{"_index":213,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validatebycredentials",{"_index":192,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validatebycredentials(identifier",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validatebytoken",{"_index":193,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validatebytoken(payload",{"_index":222,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validatedconfig",{"_index":327,"title":{},"body":{"modules/CoreModule.html":{}}}],["validatedroles",{"_index":264,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validatepassword",{"_index":856,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["validatepassword(value",{"_index":902,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validatesync",{"_index":313,"title":{},"body":{"modules/CoreModule.html":{}}}],["validatesync(validatedconfig",{"_index":331,"title":{},"body":{"modules/CoreModule.html":{}}}],["validation",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationoptions",{"_index":901,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validationpipe",{"_index":305,"title":{},"body":{"modules/CoreModule.html":{}}}],["validator",{"_index":314,"title":{},"body":{"modules/CoreModule.html":{},"classes/EnvironmentVariables.html":{},"entities/Role.html":{},"entities/User.html":{},"dependencies.html":{}}}],["value",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":919,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":371,"title":{},"body":{"injectables/EnvironmentService.html":{},"classes/EnvironmentVariables.html":{},"controllers/SessionController.html":{},"properties.html":{}}}],["void",{"_index":431,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["wayne",{"_index":743,"title":{},"body":{"injectables/SessionService.html":{}}}],["yes",{"_index":211,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiMethodParams.html":{"url":"interfaces/ApiMethodParams.html","title":"interface - ApiMethodParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiMethodParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/decorators/api-common.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseDescription\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            summary\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseDescription\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseDescription:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseType:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:         AuthRole[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthRole[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summary:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { applyDecorators, Delete, Get, HttpCode, HttpStatus, Patch, Post, Put, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiOkResponse, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { startCase } from 'lodash';\n\nimport { API_RESPONSES } from '@core/constants';\nimport { UseSessionGuard } from '@users/decorators';\nimport { Roles } from '@authentication/decorators';\nimport { AuthRole } from '@authentication/constants';\nimport { JwtAuthGuard, RolesGuard } from '@authentication/guards';\n\ninterface ApiMethodParams {\n  path?: string;\n  roles?: AuthRole[];\n  summary?: string;\n  description?: string;\n  responseType?: any;\n  responseDescription?: string;\n}\n\nfunction ApiMethod(params?: ApiMethodParams): MethodDecorator {\n  const roles = params?.roles ? '[' + params.roles.map((e) => startCase(e)).join('/') + '] ' : '';\n  const decorators = [\n    ApiOperation({\n      summary: roles + (params?.summary ?? ''),\n      description: params?.description,\n    }),\n    ApiOkResponse({\n      type: params?.responseType,\n      description: params?.responseDescription,\n    }),\n    ApiResponse(API_RESPONSES.COMMON_ERROR),\n    ...(params?.roles\n      ? [ApiBearerAuth(), UseGuards(JwtAuthGuard, RolesGuard), Roles(...params.roles), UseSessionGuard()]\n      : []),\n  ];\n  return applyDecorators(...decorators);\n}\n\nexport function ApiPost(params?: ApiMethodParams): MethodDecorator {\n  return applyDecorators(Post(params?.path), ApiMethod(params), HttpCode(HttpStatus.OK));\n}\n\nexport function ApiGet(params?: ApiMethodParams): MethodDecorator {\n  return applyDecorators(Get(params?.path), ApiMethod(params));\n}\n\nexport function ApiPatch(params?: ApiMethodParams): MethodDecorator {\n  return applyDecorators(Patch(params?.path), ApiMethod(params), HttpCode(HttpStatus.OK));\n}\n\nexport function ApiPut(params?: ApiMethodParams): MethodDecorator {\n  return applyDecorators(Put(params?.path), ApiMethod(params), HttpCode(HttpStatus.OK));\n}\n\nexport function ApiDelete(params?: ApiMethodParams): MethodDecorator {\n  return applyDecorators(Delete(params?.path), ApiMethod(params), ApiOkResponse(API_RESPONSES.DELETION));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCoreModule\n\nCoreModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CoreModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CoreModule } from '@core/core.module';\nimport { ProductsModule } from '@products/products.module';\nimport { UsersModule } from '@users/users.module';\n\n@Module({\n  imports: [CoreModule, UsersModule, ProductsModule],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthTokenResponse.html":{"url":"classes/AuthTokenResponse.html","title":"class - AuthTokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthTokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/integrations/authentication/constants/auth-token-response.constant.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authentication\n                            \n                            \n                                authToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authentication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Authentication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => Authentication})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/integrations/authentication/constants/auth-token-response.constant.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/integrations/authentication/constants/auth-token-response.constant.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Authentication } from '@authentication/entities';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthTokenResponse {\n  @ApiProperty({ type: () => Authentication })\n  authentication: Authentication;\n\n  @ApiProperty()\n  authToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Authentication.html":{"url":"entities/Authentication.html","title":"entity - Authentication","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Authentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/integrations/authentication/entities/authentication.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                identifier\n                            \n                            \n                                passwordHash\n                            \n                            \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/integrations/authentication/entities/authentication.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        identifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Access unique identifier required to access. Could be an email, username, etc.'})@Exclude()@Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/integrations/authentication/entities/authentication.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordHash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Hashed access key'})@Exclude()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/integrations/authentication/entities/authentication.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A list containing the Id of every User role', isArray: true, enum: Role})@ManyToMany(undefined, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/integrations/authentication/entities/authentication.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Exclude } from 'class-transformer';\nimport { Column, Entity, JoinTable, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Role } from './auth-roles.entity';\n\n@Entity()\nexport class Authentication {\n  @Exclude()\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ApiProperty({ description: 'Access unique identifier required to access. Could be an email, username, etc.' })\n  @Exclude()\n  @Column({ unique: true })\n  identifier: string;\n\n  @ApiProperty({ description: 'Hashed access key' })\n  @Exclude()\n  @Column()\n  passwordHash: string;\n\n  @ApiProperty({ description: 'A list containing the Id of every User role', isArray: true, enum: Role })\n  @ManyToMany(() => Role, { eager: true })\n  @JoinTable()\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nAuthenticationModule -->\n\nJwtAuthStrategy->AuthenticationModule\n\n\n\n\n\nLocalAuthStrategy\n\nLocalAuthStrategy\n\nAuthenticationModule -->\n\nLocalAuthStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/integrations/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtAuthStrategy\n                        \n                        \n                            LocalAuthStrategy\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { EnvironmentService } from '@core/services';\nimport { AuthenticationService } from './services';\nimport { Authentication, Role } from './entities';\nimport { JwtAuthStrategy, LocalAuthStrategy } from './strategies';\n\n@Module({\n  imports: [\n    PassportModule,\n    JwtModule.registerAsync({\n      inject: [EnvironmentService],\n      useFactory: (environmentService: EnvironmentService) => ({\n        secret: environmentService.get('JWT_SECRET'),\n        signOptions: { expiresIn: environmentService.get('JWT_EXPIRATION_TIME') },\n      }),\n    }),\n    TypeOrmModule.forFeature([Authentication, Role]),\n  ],\n  providers: [AuthenticationService, LocalAuthStrategy, JwtAuthStrategy],\n  exports: [AuthenticationService, TypeOrmModule],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/integrations/authentication/services/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                syncAuthRoles\n                            \n                            \n                                    Private\n                                    Async\n                                validateAuthRoles\n                            \n                            \n                                    Async\n                                validateByCredentials\n                            \n                            \n                                    Async\n                                validateByToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authRepository: Repository, rolesRepository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/integrations/authentication/services/authentication/authentication.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(authentication: Authentication)\n                \n            \n\n\n            \n                \n                    Defined in src/integrations/authentication/services/authentication/authentication.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authentication\n                                    \n                                                Authentication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(dto: AuthenticationSignUpDto, roles?: AuthRole[])\n                \n            \n\n\n            \n                \n                    Defined in src/integrations/authentication/services/authentication/authentication.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthenticationSignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roles\n                                    \n                                                AuthRole[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        syncAuthRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    syncAuthRoles()\n                \n            \n\n\n            \n                \n                    Defined in src/integrations/authentication/services/authentication/authentication.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateAuthRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateAuthRoles(roles: string[], generate)\n                \n            \n\n\n            \n                \n                    Defined in src/integrations/authentication/services/authentication/authentication.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    roles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    generate\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateByCredentials\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateByCredentials(identifier: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/integrations/authentication/services/authentication/authentication.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    identifier\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateByToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateByToken(payload: IDecodedToken)\n                \n            \n\n\n            \n                \n                    Defined in src/integrations/authentication/services/authentication/authentication.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                IDecodedToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Authentication } from '@authentication/entities/authentication.entity';\nimport {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport * as bcrypt from 'bcrypt';\nimport to from 'await-to-js';\n\nimport { AuthenticationSignUpDto } from '@authentication/dto';\nimport { AuthRole, AuthTokenResponse, AUTH_ROLE_VALUES, IDecodedToken } from '@authentication/constants';\nimport { JwtService } from '@nestjs/jwt';\nimport { Role } from '@authentication/entities';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    @InjectRepository(Authentication)\n    private readonly authRepository: Repository,\n    @InjectRepository(Role)\n    private readonly rolesRepository: Repository,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async validateByCredentials(identifier: string, plainTextPassword: string): Promise {\n    const authentication = await this.authRepository.findOneBy({ identifier });\n    if (!authentication) throw new NotFoundException('Registry does not exist');\n    const matches = await bcrypt.compare(plainTextPassword, authentication.passwordHash);\n    if (!matches) throw new UnauthorizedException('Wrong credentials provided');\n    return authentication;\n  }\n\n  async validateByToken(payload: IDecodedToken): Promise {\n    const authentication = await this.authRepository.findOneBy({ id: payload.authId });\n    if (!authentication) throw new NotFoundException('Authentication registry not longer exists');\n    return authentication;\n  }\n\n  async logIn(authentication: Authentication): Promise {\n    return {\n      authentication,\n      authToken: this.jwtService.sign({\n        authId: authentication.id,\n        identifier: authentication.identifier,\n      } as IDecodedToken),\n    };\n  }\n\n  async signUp(dto: AuthenticationSignUpDto, roles?: AuthRole[]): Promise {\n    const hashedPassword = await bcrypt.hash(dto.plainTextPassword, 10);\n    const validatedRoles = await this.validateAuthRoles(roles ?? [AuthRole.REGULAR]);\n    const authentication = this.authRepository.create({\n      identifier: dto.identifier,\n      passwordHash: hashedPassword,\n      roles: validatedRoles,\n    });\n    const [err] = await to(this.authRepository.save(authentication));\n    if (err) throw new ConflictException('A registry with this identifier already exists', err.message);\n    return {\n      authentication,\n      authToken: this.jwtService.sign({\n        authId: authentication.id,\n        identifier: dto.identifier,\n      } as IDecodedToken),\n    };\n  }\n\n  async syncAuthRoles(): Promise {\n    const [err] = await to(this.validateAuthRoles(AUTH_ROLE_VALUES, true));\n    if (err) throw new InternalServerErrorException('Could not sync roles into the database', err.message);\n    console.info('Authentication roles synced successfully');\n  }\n\n  private async validateAuthRoles(roles: string[], generate = false): Promise {\n    const data = await Promise.all(\n      roles.map(async (roleName) => {\n        const role = await this.rolesRepository.findOneBy({ name: roleName });\n        if (!role) {\n          if (generate) await this.rolesRepository.insert({ name: roleName });\n          else throw new BadRequestException('Invalid Authentication Role');\n        }\n        return role;\n      }),\n    );\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationSignUpDto.html":{"url":"classes/AuthenticationSignUpDto.html","title":"class - AuthenticationSignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationSignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/integrations/authentication/dto/authentication-signup.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                plainTextPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        plainTextPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()@ApiProperty({description: PASSWORD_DESCRIPTION})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/integrations/authentication/dto/authentication-signup.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Authentication } from '@authentication/entities/authentication.entity';\nimport { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsPassword, PASSWORD_DESCRIPTION } from '@shared/decorators';\n\nexport class AuthenticationSignUpDto extends PickType(Authentication, ['identifier'] as const) {\n  @IsPassword()\n  @ApiProperty({ description: PASSWORD_DESCRIPTION })\n  plainTextPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_CoreModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nAuthenticationModule->CoreModule\n\n\n\n\n\nAuthenticationModule \n\nAuthenticationModule \n\nAuthenticationModule  -->\n\nCoreModule->AuthenticationModule \n\n\n\n\n\nEnvironmentService \n\nEnvironmentService \n\nEnvironmentService  -->\n\nCoreModule->EnvironmentService \n\n\n\n\n\nEnvironmentService\n\nEnvironmentService\n\nCoreModule -->\n\nEnvironmentService->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EnvironmentService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            EnvironmentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ClassSerializerInterceptor, Global, Module, ValidationPipe } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_FILTER, APP_INTERCEPTOR, APP_PIPE } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { plainToInstance } from 'class-transformer';\nimport { validateSync } from 'class-validator';\n\nimport { EnvironmentVariables } from './constants';\nimport { HttpExceptionFilter } from './filters';\nimport { DatabaseService, EnvironmentService } from './services';\nimport { AuthenticationModule } from '@authentication/authentication.module';\n\n@Global()\n@Module({\n  providers: [\n    EnvironmentService,\n    {\n      provide: APP_FILTER,\n      useClass: HttpExceptionFilter,\n    },\n    {\n      provide: APP_PIPE,\n      useClass: ValidationPipe,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: ClassSerializerInterceptor,\n    },\n  ],\n  imports: [\n    ConfigModule.forRoot({\n      validate: (config: Record) => {\n        const validatedConfig = plainToInstance(EnvironmentVariables, config, {\n          enableImplicitConversion: true,\n        });\n        const errors = validateSync(validatedConfig, {\n          skipMissingProperties: false,\n        });\n        if (errors.length > 0) throw new Error(errors.toString());\n        return validatedConfig;\n      },\n    }),\n    TypeOrmModule.forRootAsync({\n      useClass: DatabaseService,\n    }),\n    AuthenticationModule,\n  ],\n  exports: [EnvironmentService, AuthenticationModule],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseService.html":{"url":"injectables/DatabaseService.html","title":"injectable - DatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/services/database/database.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                name\n                            \n                            \n                                    Private\n                                password\n                            \n                            \n                                    Private\n                                port\n                            \n                            \n                                    Private\n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTypeOrmOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(environmentService: EnvironmentService)\n                    \n                \n                        \n                            \n                                Defined in src/core/services/database/database.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        environmentService\n                                                  \n                                                        \n                                                                        EnvironmentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTypeOrmOptions\n                        \n                    \n                \n            \n            \n                \ncreateTypeOrmOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/services/database/database.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     TypeOrmModuleOptions\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/services/database/database.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/services/database/database.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        port\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/core/services/database/database.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/services/database/database.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { TypeOrmOptionsFactory, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { EnvironmentService } from '../environment/environment.service';\n\n@Injectable()\nexport class DatabaseService implements TypeOrmOptionsFactory {\n  private name: string;\n  private username: string;\n  private password: string;\n  private port: number;\n\n  constructor(private readonly environmentService: EnvironmentService) {\n    this.name = this.environmentService.get('DATABASE_NAME');\n    this.username = this.environmentService.get('DATABASE_USERNAME');\n    this.password = this.environmentService.get('DATABASE_PASSWORD');\n    this.port = this.environmentService.get('DATABASE_PORT');\n  }\n\n  createTypeOrmOptions(): TypeOrmModuleOptions {\n    return {\n      type: 'mysql',\n      host: 'localhost',\n      port: this.port,\n      database: this.name,\n      username: this.username,\n      password: this.password,\n      autoLoadEntities: true,\n      synchronize: !this.environmentService.isProduction,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EnvironmentService.html":{"url":"injectables/EnvironmentService.html","title":"injectable - EnvironmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EnvironmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/services/environment/environment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isDevelopment\n                                \n                                \n                                    isTesting\n                                \n                                \n                                    isProduction\n                                \n                                \n                                    version\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/services/environment/environment.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: K)\n                \n            \n\n\n            \n                \n                    Defined in src/core/services/environment/environment.service.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isDevelopment\n                    \n                \n\n                \n                    \n                        getisDevelopment()\n                    \n                \n                            \n                                \n                                    Defined in src/core/services/environment/environment.service.ts:10\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isTesting\n                    \n                \n\n                \n                    \n                        getisTesting()\n                    \n                \n                            \n                                \n                                    Defined in src/core/services/environment/environment.service.ts:14\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isProduction\n                    \n                \n\n                \n                    \n                        getisProduction()\n                    \n                \n                            \n                                \n                                    Defined in src/core/services/environment/environment.service.ts:18\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        version\n                    \n                \n\n                \n                    \n                        getversion()\n                    \n                \n                            \n                                \n                                    Defined in src/core/services/environment/environment.service.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { Environment, EnvironmentVariables } from '@core/constants';\n\n@Injectable()\nexport class EnvironmentService {\n  constructor(private configService: ConfigService) {}\n\n  get isDevelopment(): boolean {\n    return this.get('NODE_ENV') === Environment.DEVELOPMENT;\n  }\n\n  get isTesting(): boolean {\n    return this.get('NODE_ENV') === Environment.TEST;\n  }\n\n  get isProduction(): boolean {\n    return this.get('NODE_ENV') === Environment.PRODUCTION;\n  }\n\n  get version(): string {\n    return this.get('VERSION').toString();\n  }\n\n  get(key: K): T {\n    return this.configService.get(key);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentVariables.html":{"url":"classes/EnvironmentVariables.html","title":"class - EnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/constants/environment.variables.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                DATABASE_NAME\n                            \n                            \n                                DATABASE_PASSWORD\n                            \n                            \n                                DATABASE_PORT\n                            \n                            \n                                DATABASE_USERNAME\n                            \n                            \n                                JWT_EXPIRATION_TIME\n                            \n                            \n                                JWT_SECRET\n                            \n                            \n                                NODE_ENV\n                            \n                            \n                                PORT\n                            \n                            \n                                VERSION\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/constants/environment.variables.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/constants/environment.variables.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/constants/environment.variables.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_USERNAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/constants/environment.variables.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/constants/environment.variables.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/constants/environment.variables.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NODE_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Environment)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/constants/environment.variables.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/constants/environment.variables.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/constants/environment.variables.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNumber, IsInt, IsString } from 'class-validator';\n\nexport enum Environment {\n  DEVELOPMENT = 'development',\n  PRODUCTION = 'production',\n  TEST = 'test',\n}\n\nexport class EnvironmentVariables {\n  // Environment\n  @IsEnum(Environment)\n  NODE_ENV: Environment;\n  @IsInt()\n  VERSION: number;\n  @IsNumber()\n  PORT: number;\n\n  // JWT OPTIONS\n  @IsString()\n  JWT_SECRET: string;\n  @IsString()\n  JWT_EXPIRATION_TIME: string;\n\n  // MYSQL DATABASE\n  @IsString()\n  DATABASE_NAME: string;\n  @IsString()\n  DATABASE_USERNAME: string;\n  @IsString()\n  DATABASE_PASSWORD: string;\n  @IsInt()\n  DATABASE_PORT: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(environmentService: EnvironmentService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/http-exception.filter.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        environmentService\n                                                  \n                                                        \n                                                                        EnvironmentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http-exception.filter.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common';\nimport { Response } from 'express';\nimport { EnvironmentService } from '../services';\n\n@Catch()\nexport class HttpExceptionFilter implements ExceptionFilter {\n  constructor(private readonly environmentService: EnvironmentService) {}\n\n  catch(exception: unknown, host: ArgumentsHost) {\n    console.error(exception);\n\n    const isHttpException = exception instanceof HttpException;\n    const context = host.switchToHttp();\n    const response = context.getResponse();\n    const request = context.getRequest();\n\n    let status = HttpStatus.INTERNAL_SERVER_ERROR;\n    let name = 'Internal Server Error';\n    let error = 'An unknown error just happened';\n    let messages = exception;\n    let stack = null;\n\n    if (isHttpException) {\n      const exceptionResponse = exception.getResponse();\n      status = exception.getStatus();\n      name = exception.name;\n      error = exceptionResponse['error'];\n      messages = exceptionResponse['message'];\n      stack = !this.environmentService.isProduction ? exception.stack : null;\n    }\n\n    response.status(status).json({\n      status,\n      name,\n      error,\n      messages,\n      path: request.url,\n      timestamp: new Date().toISOString(),\n      ...(stack && { stack }),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDecodedToken.html":{"url":"interfaces/IDecodedToken.html","title":"interface - IDecodedToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDecodedToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/integrations/authentication/constants/decoded-token.constant.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authId\n                                        \n                                \n                                \n                                        \n                                            identifier\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        identifier\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        identifier:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDecodedToken {\n  authId: number;\n  identifier: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHttpResponse.html":{"url":"interfaces/IHttpResponse.html","title":"interface - IHttpResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IHttpResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/constants/http-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IHttpResponse {\n  data?: T;\n  error?: {\n    status: number;\n    name: string;\n    error: string;\n    messages: any;\n    path: string;\n    timestamp: string;\n    stack?: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/integrations/authentication/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthStrategy.html":{"url":"injectables/JwtAuthStrategy.html","title":"injectable - JwtAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/integrations/authentication/strategies/jwt-auth.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(environmentService: EnvironmentService, authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/integrations/authentication/strategies/jwt-auth.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        environmentService\n                                                  \n                                                        \n                                                                        EnvironmentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: IDecodedToken)\n                \n            \n\n\n            \n                \n                    Defined in src/integrations/authentication/strategies/jwt-auth.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                IDecodedToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { AuthenticationService } from '@authentication/services';\nimport { EnvironmentService } from '@core/services';\nimport { IDecodedToken } from '@authentication/constants';\nimport { Authentication } from '@authentication/entities';\n\n@Injectable()\nexport class JwtAuthStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    private readonly environmentService: EnvironmentService,\n    private readonly authService: AuthenticationService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: environmentService.get('JWT_SECRET'),\n      ignoreExpiration: !environmentService.isProduction,\n    });\n  }\n\n  async validate(payload: IDecodedToken): Promise {\n    const registry = await this.authService.validateByToken(payload);\n    return registry;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/integrations/authentication/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthStrategy.html":{"url":"injectables/LocalAuthStrategy.html","title":"injectable - LocalAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/integrations/authentication/strategies/local-auth.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/integrations/authentication/strategies/local-auth.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/integrations/authentication/strategies/local-auth.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from '@authentication/services';\nimport { Authentication } from '@authentication/entities';\n\n@Injectable()\nexport class LocalAuthStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthenticationService) {\n    super({ usernameField: 'email' });\n  }\n  async validate(email: string, password: string): Promise {\n    const registry = await this.authService.validateByCredentials(email, password);\n    return registry;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/products/entities/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                price\n                            \n                            \n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A brief description of the product'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/products/entities/product.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/products/entities/product.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product's name'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/products/entities/product.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unit price of the product', default: 0})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/products/entities/product.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'How many products of this type are in existence'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/products/entities/product.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Product {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ApiProperty({ description: \"Product's name\" })\n  @Column()\n  name: string;\n\n  @ApiProperty({ description: 'A brief description of the product' })\n  @Column()\n  description: string;\n\n  @ApiProperty({ description: 'The unit price of the product', default: 0 })\n  @Column()\n  price: number;\n\n  @ApiProperty({ description: 'How many products of this type are in existence' })\n  @Column()\n  stock: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductCreateDto.html":{"url":"classes/ProductCreateDto.html","title":"class - ProductCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/products/dto/product-create.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { Product } from '@products/entities';\n\nexport class ProductCreateDto extends PickType(Product, ['name', 'description', 'price', 'stock'] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductUpdateDto.html":{"url":"classes/ProductUpdateDto.html","title":"class - ProductUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/products/dto/product-update.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, PickType } from '@nestjs/swagger';\nimport { Product } from '@products/entities';\n\nexport class ProductUpdateDto extends PartialType(PickType(Product, ['name', 'description', 'price', 'stock'])) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/products/controllers/products/products.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                updateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: ProductCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiPost({roles: undefined, summary: 'Create a new `Product`', description: 'Stores a new `Product` record into the database', responseDescription: 'A model containing the newly created `Product` information', responseType: Product})\n                \n            \n\n            \n                \n                    Defined in src/modules/products/controllers/products/products.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ProductCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiDelete({path: undefined, roles: undefined, summary: 'Delete a `Product` by Id', description: 'Deletes a `Product` record that matches the Id', responseDescription: 'A model containing the information of the deleted `Product`', responseType: Product})@ApiParam({name: 'id', type: Number})\n                \n            \n\n            \n                \n                    Defined in src/modules/products/controllers/products/products.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiGet({roles: ALL_ROLES, summary: 'Get all `Products`', description: 'Retrieves a list containing every `Product` record in the database', responseDescription: 'A list of models containing the information of every `Product` in the database', responseType: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/products/controllers/products/products.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiGet({path: undefined, roles: ALL_ROLES, summary: 'Get a `Product` by Id', description: 'Retrieves a `Product` record that matches the Id', responseDescription: 'A model containing the information of the matched `Product`', responseType: Product})@ApiParam({name: 'id', type: Number})\n                \n            \n\n            \n                \n                    Defined in src/modules/products/controllers/products/products.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateById(id: number, body: ProductUpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiPatch({path: undefined, roles: undefined, summary: 'Update a `Product` by Id', description: 'Updates a `Product` record that matches the Id', responseDescription: 'A model containing the updated information of the matched `Product`', responseType: Product})@ApiParam({name: 'id', type: Number})\n                \n            \n\n            \n                \n                    Defined in src/modules/products/controllers/products/products.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                ProductUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Param } from '@nestjs/common';\nimport { ApiParam, ApiTags } from '@nestjs/swagger';\n\nimport { API_ENDPOINTS, IHttpResponse } from '@core/constants';\nimport { ApiDelete, ApiGet, ApiPatch, ApiPost } from '@shared/decorators';\nimport { ALL_ROLES, AuthRole } from '@authentication/constants';\nimport { ProductCreateDto, ProductUpdateDto } from '@products/dto';\nimport { Product } from '@products/entities';\nimport { ProductsService } from '@products/services';\n\n@ApiTags('Products')\n@Controller(API_ENDPOINTS.PRODUCTS.BASE_PATH)\nexport class ProductsController {\n  constructor(private readonly productsService: ProductsService) {}\n\n  @ApiPost({\n    roles: [AuthRole.ADMIN],\n    summary: 'Create a new `Product`',\n    description: 'Stores a new `Product` record into the database',\n    responseDescription: 'A model containing the newly created `Product` information',\n    responseType: Product,\n  })\n  async create(@Body() dto: ProductCreateDto): Promise> {\n    const data = await this.productsService.create(dto);\n    return { data };\n  }\n\n  @ApiGet({\n    roles: ALL_ROLES,\n    summary: 'Get all `Products`',\n    description: 'Retrieves a list containing every `Product` record in the database',\n    responseDescription: 'A list of models containing the information of every `Product` in the database',\n    responseType: [Product],\n  })\n  async find(): Promise> {\n    const data = await this.productsService.find();\n    return { data };\n  }\n\n  @ApiGet({\n    path: API_ENDPOINTS.PRODUCTS.BY_ID,\n    roles: ALL_ROLES,\n    summary: 'Get a `Product` by Id',\n    description: 'Retrieves a `Product` record that matches the Id',\n    responseDescription: 'A model containing the information of the matched `Product`',\n    responseType: Product,\n  })\n  @ApiParam({ name: 'id', type: Number })\n  async findById(@Param('id') id: number): Promise> {\n    const data = await this.productsService.findOne({ where: { id } });\n    return { data };\n  }\n\n  @ApiPatch({\n    path: API_ENDPOINTS.PRODUCTS.BY_ID,\n    roles: [AuthRole.ADMIN],\n    summary: 'Update a `Product` by Id',\n    description: 'Updates a `Product` record that matches the Id',\n    responseDescription: 'A model containing the updated information of the matched `Product`',\n    responseType: Product,\n  })\n  @ApiParam({ name: 'id', type: Number })\n  async updateById(@Param('id') id: number, @Body() body: ProductUpdateDto): Promise> {\n    const data = await this.productsService.updateById(id, body);\n    return { data };\n  }\n\n  @ApiDelete({\n    path: API_ENDPOINTS.PRODUCTS.BY_ID,\n    roles: [AuthRole.ADMIN],\n    summary: 'Delete a `Product` by Id',\n    description: 'Deletes a `Product` record that matches the Id',\n    responseDescription: 'A model containing the information of the deleted `Product`',\n    responseType: Product,\n  })\n  @ApiParam({ name: 'id', type: Number })\n  async deleteById(@Param('id') id: number): Promise> {\n    const data = await this.productsService.deleteById(id);\n    return { data };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nUsersModule->ProductsModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from '@users/users.module';\nimport { ProductsController } from './controllers';\nimport { Product } from './entities';\nimport { ProductsService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product]), UsersModule],\n  controllers: [ProductsController],\n  providers: [ProductsService],\n  exports: [ProductsService],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/products/services/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                updateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/products/services/products/products.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: ProductCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/products/services/products/products.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ProductCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/products/services/products/products.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(options?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/products/services/products/products.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/products/services/products/products.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateById(id: number, dto: ProductUpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/products/services/products/products.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                ProductUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindManyOptions, FindOneOptions, Repository } from 'typeorm';\nimport to from 'await-to-js';\n\nimport { ProductCreateDto, ProductUpdateDto } from '@products/dto';\nimport { Product } from '@products/entities';\n\n@Injectable()\nexport class ProductsService {\n  constructor(\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  async create(dto: ProductCreateDto): Promise {\n    const product = this.productsRepository.create(dto);\n    const [err] = await to(this.productsRepository.save(product));\n    if (err) throw new ForbiddenException(err.name, err.message);\n    return product;\n  }\n\n  async find(options?: FindManyOptions): Promise {\n    const products = this.productsRepository.find(options);\n    return products;\n  }\n\n  async findOne(options: FindOneOptions): Promise {\n    const product = await this.productsRepository.findOne(options);\n    if (!product) throw new NotFoundException('Product not found');\n    return product;\n  }\n\n  async updateById(id: number, dto: ProductUpdateDto): Promise {\n    const product = await this.productsRepository.preload({ id, ...dto });\n    if (!product) throw new NotFoundException('Product not found');\n    await this.productsRepository.update({ id }, dto);\n    return product;\n  }\n\n  async deleteById(id: number): Promise {\n    const product = await this.productsRepository.findOneBy({ id });\n    if (!product) throw new NotFoundException('Product not found');\n    return await this.productsRepository.remove(product);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/integrations/authentication/entities/auth-roles.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Role's primary key'})@PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/integrations/authentication/entities/auth-roles.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Role's identifier name'})@IsString()@Length(1, 32)@Index({unique: true})@Column({length: 32})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/integrations/authentication/entities/auth-roles.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { AuthRole, AUTH_ROLE_VALUES } from '@authentication/constants';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsString, Length } from 'class-validator';\nimport { Column, Entity, Index, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Role {\n  @ApiProperty({ description: \"Role's primary key\" })\n  @PrimaryGeneratedColumn('increment')\n  id: number;\n\n  @ApiProperty({ description: \"Role's identifier name\" })\n  @IsString()\n  @Length(1, 32)\n  @Index({ unique: true })\n  @Column({ length: 32 })\n  name: string;\n\n  get authRole(): AuthRole {\n    return AUTH_ROLE_VALUES.find((e) => e == this.name);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/integrations/authentication/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/integrations/authentication/guards/roles.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/integrations/authentication/guards/roles.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { AuthRole } from '@authentication/constants';\nimport { ROLES_KEY } from '@authentication/decorators';\nimport { Authentication } from '@authentication/entities';\nimport { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) return true;\n    const { user: authentication } = context.switchToHttp().getRequest();\n    const hasRole = requiredRoles.some((requiredRole) =>\n      authentication.roles.find((role) => role.name == requiredRole),\n    );\n    if (!hasRole) throw new UnauthorizedException(\"You don't have the required role\");\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/controllers/session/session.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(authentication: Authentication)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiPost({path: undefined, summary: 'Access into the `User` account', description: 'Creates a session and retrieves the logged in `User` information', responseDescription: 'An Object containing the logged in `User` information along with its authentication token', responseType: UserAuthTokenDto})@UseGuards(LocalAuthGuard)@ApiBody({type: UserLogInDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/session/session.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authentication\n                                    \n                                                Authentication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(body: UserSignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiPost({path: undefined, summary: 'Create a new `User` account', description: 'Creates a new `User` along with its log in credentials', responseDescription: 'An Object containing the logged in `User` information along with its authentication token', responseType: AuthTokenResponse})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/session/session.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                UserSignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, UseGuards } from '@nestjs/common';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\n\nimport { CurrentAuth } from '@authentication/decorators';\nimport { Authentication } from '@authentication/entities';\nimport { LocalAuthGuard } from '@authentication/guards';\nimport { API_ENDPOINTS, API_VERSIONS, IHttpResponse } from '@core/constants';\nimport { UserAuthTokenDto, UserLogInDto, UserSignUpDto } from '@users/dto';\nimport { SessionService } from '@users/services';\nimport { AuthTokenResponse } from '@authentication/constants';\nimport { ApiPost } from '@shared/decorators';\n\n@ApiTags('Session')\n@Controller({ path: API_ENDPOINTS.USERS.SESSION.BASE_PATH, version: API_VERSIONS.V1 })\nexport class SessionController {\n  constructor(private readonly sessionService: SessionService) {}\n\n  @ApiPost({\n    path: API_ENDPOINTS.USERS.SESSION.LOG_IN,\n    summary: 'Access into the `User` account',\n    description: 'Creates a session and retrieves the logged in `User` information',\n    responseDescription: 'An Object containing the logged in `User` information along with its authentication token',\n    responseType: UserAuthTokenDto,\n  })\n  @UseGuards(LocalAuthGuard)\n  @ApiBody({ type: UserLogInDto })\n  async logIn(@CurrentAuth() authentication: Authentication): Promise> {\n    const data = await this.sessionService.logIn(authentication.identifier);\n    return { data };\n  }\n\n  @ApiPost({\n    path: API_ENDPOINTS.USERS.SESSION.SIGN_UP,\n    summary: 'Create a new `User` account',\n    description: 'Creates a new `User` along with its log in credentials',\n    responseDescription: 'An Object containing the logged in `User` information along with its authentication token',\n    responseType: AuthTokenResponse,\n  })\n  async signUp(@Body() body: UserSignUpDto): Promise> {\n    const data = await this.sessionService.signUp(body);\n    return { data };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/users/guards/session-guard.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/guards/session-guard.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/guards/session-guard.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { Authentication } from '@authentication/entities';\nimport { UsersService } from '@users/services';\n\n@Injectable()\nexport class SessionGuard implements CanActivate {\n  constructor(private readonly usersService: UsersService) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const authorization = request.user as Authentication;\n    if (!authorization) throw new UnauthorizedException('You must log in first');\n    const user = await this.usersService.findOne({\n      where: { email: authorization.identifier },\n      relations: ['authentication'],\n    });\n    request.user = user;\n    return !!user;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/services/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                testAdmin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/services/session/session.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/session/session.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(dto: UserSignUpDto, isAdmin)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/session/session.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UserSignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isAdmin\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        testAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    testAdmin()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/session/session.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport to from 'await-to-js';\n\nimport { AuthenticationService } from '@authentication/services';\nimport { UserAuthTokenDto, UserSignUpDto } from '@users/dto';\nimport { User } from '@users/entities';\nimport { AuthRole } from '@authentication/constants';\n\n@Injectable()\nexport class SessionService {\n  constructor(\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n    private readonly authService: AuthenticationService,\n  ) {}\n\n  async signUp(dto: UserSignUpDto, isAdmin = false): Promise {\n    const { authentication, authToken } = await this.authService.signUp(\n      {\n        identifier: dto.email,\n        plainTextPassword: dto.password,\n      },\n      isAdmin ? [AuthRole.ADMIN] : null,\n    );\n    const user = this.usersRepository.create({\n      email: dto.email,\n      firstName: dto.firstName,\n      lastName: dto.lastName,\n      authentication,\n    });\n    const [err] = await to(this.usersRepository.save(user));\n    if (err) throw new ForbiddenException(err.name, err.message);\n    delete user.authentication;\n    return { user, authToken };\n  }\n\n  async logIn(email: string): Promise {\n    const user = await this.usersRepository.findOne({\n      relations: ['authentication'],\n      where: { email },\n    });\n    if (!user) throw new NotFoundException('User not found');\n    const { authToken } = await this.authService.logIn(user.authentication);\n    delete user.authentication;\n    return { user, authToken };\n  }\n\n  async testAdmin() {\n    const exists = await this.usersRepository.findOneBy({ email: 'admin@admin.com' });\n    if (!exists) {\n      await this.signUp(\n        {\n          email: 'admin@admin.com',\n          firstName: 'Bruce',\n          lastName: 'Wayne',\n          password: 'Abc1234#',\n          confirmPassword: 'Abc1234#',\n        },\n        true,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                authentication\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        authentication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Authentication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: () => Authentication})@Exclude()@OneToOne(undefined, {eager: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User's email address'})@IsEmail()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User's first name'})@IsString()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User unique identifier'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User's last name'})@IsString()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsEmail, IsString } from 'class-validator';\nimport { Column, OneToOne, JoinColumn, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { Authentication } from '@authentication/entities';\nimport { AuthRole } from '@authentication/constants';\nimport { Exclude } from 'class-transformer';\n\n@Entity()\nexport class User {\n  @ApiProperty({ description: 'User unique identifier' })\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ApiProperty({ description: \"User's email address\" })\n  @IsEmail()\n  @Column()\n  email: string;\n\n  @ApiProperty({ description: \"User's first name\" })\n  @IsString()\n  @Column()\n  firstName: string;\n\n  @ApiProperty({ description: \"User's last name\" })\n  @IsString()\n  @Column()\n  lastName: string;\n\n  @ApiPropertyOptional({ type: () => Authentication })\n  @Exclude()\n  @OneToOne(() => Authentication, { eager: true })\n  @JoinColumn()\n  authentication?: Authentication;\n\n  get fullName(): string {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  get roles(): AuthRole[] {\n    return this.authentication?.roles?.map((e) => e.authRole) ?? [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserAuthTokenDto.html":{"url":"classes/UserAuthTokenDto.html","title":"class - UserAuthTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserAuthTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user-auth-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authToken\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Authentication token required to validate protected endpoints'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user-auth-token.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Model containing logged in `User` information'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user-auth-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '@users/entities';\n\nexport class UserAuthTokenDto {\n  @ApiProperty({ description: 'Model containing logged in `User` information' })\n  user: User;\n\n  @ApiProperty({ description: 'Authentication token required to validate protected endpoints' })\n  authToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCreateDto.html":{"url":"classes/UserCreateDto.html","title":"class - UserCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user-create.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { User } from '@users/entities';\n\nexport class UserCreateDto extends PickType(User, ['email', 'firstName', 'lastName'] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserLogInDto.html":{"url":"classes/UserLogInDto.html","title":"class - UserLogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserLogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user-login.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserSignUpDto } from './user-signup.dto';\n\nexport class UserLogInDto extends PickType(UserSignUpDto, ['email', 'password']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSignUpDto.html":{"url":"classes/UserSignUpDto.html","title":"class - UserSignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user-signup.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MatchProperty('password')@ApiProperty({description: 'Must match with 'password' field'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user-signup.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()@ApiProperty({description: PASSWORD_DESCRIPTION})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user-signup.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsPassword, MatchProperty, PASSWORD_DESCRIPTION } from '@shared/decorators';\nimport { User } from '@users/entities';\n\nexport class UserSignUpDto extends PickType(User, ['email', 'firstName', 'lastName'] as const) {\n  @IsPassword()\n  @ApiProperty({ description: PASSWORD_DESCRIPTION })\n  password: string;\n\n  @MatchProperty('password')\n  @ApiProperty({ description: \"Must match with 'password' field\" })\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserUpdateDto.html":{"url":"classes/UserUpdateDto.html","title":"class - UserUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user-update.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType, PartialType } from '@nestjs/swagger';\nimport { User } from '@users/entities';\n\nexport class UserUpdateDto extends PartialType(PickType(User, ['firstName', 'lastName'] as const)) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/controllers/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                updateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: UserCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiPost({roles: undefined, summary: 'Create a new `User`', description: 'Stores a new `User` record into the database', responseDescription: 'A model containing the newly created `User` information', responseType: User})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users/users.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UserCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiDelete({path: undefined, roles: undefined, summary: 'Delete an `User` by Id', description: 'Deletes an `User` record that matches the Id', responseDescription: 'A model containing the information of the deleted `User`', responseType: User})@ApiParam({name: 'id', type: Number})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users/users.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiGet({roles: undefined, summary: 'Get all `Users`', description: 'Retrieves a list containing every `User` record in the database', responseDescription: 'A list of models containing the information of every `User` in the database', responseType: undefined})@UseSessionGuard()\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users/users.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiGet({path: undefined, roles: ALL_ROLES, summary: 'Get an `User` by Id', description: 'Retrieves an `User` record that matches the Id', responseDescription: 'A model containing the information of the matched `User`', responseType: User})@ApiParam({name: 'id', type: Number})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users/users.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateById(id: number, body: UserUpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiPatch({path: undefined, roles: undefined, summary: 'Update an `User` by Id', description: 'Updates an `User` record that matches the Id', responseDescription: 'A model containing the updated information of the matched `User`', responseType: User})@ApiParam({name: 'id', type: Number})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users/users.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UserUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param } from '@nestjs/common';\nimport { ApiParam, ApiTags } from '@nestjs/swagger';\n\nimport { ApiDelete, ApiGet, ApiPatch, ApiPost } from '@shared/decorators';\nimport { API_ENDPOINTS, IHttpResponse } from '@core/constants';\nimport { User } from '@users/entities';\nimport { UsersService } from '@users/services';\nimport { UserCreateDto, UserUpdateDto } from '@users/dto';\nimport { CurrentAuth } from '@authentication/decorators';\nimport { UseSessionGuard } from '@users/decorators';\nimport { ALL_ROLES, ALL_ROLES_EXCEPT, AuthRole } from '@authentication/constants';\n\n@ApiTags('Users')\n@Controller(API_ENDPOINTS.USERS.BASE_PATH)\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiPost({\n    roles: ALL_ROLES_EXCEPT(AuthRole.REGULAR),\n    summary: 'Create a new `User`',\n    description: 'Stores a new `User` record into the database',\n    responseDescription: 'A model containing the newly created `User` information',\n    responseType: User,\n  })\n  async create(@Body() dto: UserCreateDto): Promise> {\n    const data = await this.usersService.create(dto);\n    return { data };\n  }\n\n  @ApiGet({\n    roles: ALL_ROLES_EXCEPT(AuthRole.REGULAR),\n    summary: 'Get all `Users`',\n    description: 'Retrieves a list containing every `User` record in the database',\n    responseDescription: 'A list of models containing the information of every `User` in the database',\n    responseType: [User],\n  })\n  @UseSessionGuard()\n  async find(@CurrentAuth() user: User): Promise> {\n    console.log(user);\n    const data = await this.usersService.find();\n    return { data };\n  }\n\n  @ApiGet({\n    path: API_ENDPOINTS.USERS.BY_ID,\n    roles: ALL_ROLES,\n    summary: 'Get an `User` by Id',\n    description: 'Retrieves an `User` record that matches the Id',\n    responseDescription: 'A model containing the information of the matched `User`',\n    responseType: User,\n  })\n  @ApiParam({ name: 'id', type: Number })\n  async findById(@Param('id') id: number): Promise> {\n    const data = await this.usersService.findOne({ where: { id } });\n    return { data };\n  }\n\n  @ApiPatch({\n    path: API_ENDPOINTS.USERS.BY_ID,\n    roles: [AuthRole.ADMIN],\n    summary: 'Update an `User` by Id',\n    description: 'Updates an `User` record that matches the Id',\n    responseDescription: 'A model containing the updated information of the matched `User`',\n    responseType: User,\n  })\n  @ApiParam({ name: 'id', type: Number })\n  async updateById(@Param('id') id: number, @Body() body: UserUpdateDto): Promise> {\n    const data = await this.usersService.updateById(id, body);\n    return { data };\n  }\n\n  @ApiDelete({\n    path: API_ENDPOINTS.USERS.BY_ID,\n    roles: [AuthRole.ADMIN],\n    summary: 'Delete an `User` by Id',\n    description: 'Deletes an `User` record that matches the Id',\n    responseDescription: 'A model containing the information of the deleted `User`',\n    responseType: User,\n  })\n  @ApiParam({ name: 'id', type: Number })\n  async deleteById(@Param('id') id: number): Promise> {\n    const data = await this.usersService.deleteById(id);\n    return { data };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nSessionService \n\nSessionService \n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nSessionService  -->\n\nUsersModule->SessionService \n\n\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nSessionService\n\nSessionService\n\nUsersModule -->\n\nSessionService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { SessionController, UsersController } from './controllers';\nimport { SessionService, UsersService } from './services';\nimport { User } from './entities';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController, SessionController],\n  providers: [UsersService, SessionService],\n  exports: [UsersService, SessionService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/services/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                updateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/services/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: UserCreateDto, authentication?: Authentication)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users/users.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UserCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    authentication\n                                    \n                                                Authentication\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(options?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users/users.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users/users.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateById(id: number, dto: UserUpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindManyOptions, FindOneOptions, Repository } from 'typeorm';\nimport to from 'await-to-js';\n\nimport { User } from '@users/entities';\nimport { UserCreateDto, UserUpdateDto } from '@users/dto';\nimport { Authentication } from '@authentication/entities';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  async create(dto: UserCreateDto, authentication?: Authentication): Promise {\n    const user = this.usersRepository.create({ ...dto, authentication });\n    const [err] = await to(this.usersRepository.save(user));\n    if (err) throw new ForbiddenException(err.name, err.message);\n    return user;\n  }\n\n  async find(options?: FindManyOptions): Promise {\n    const users = this.usersRepository.find(options);\n    return users;\n  }\n\n  async findOne(options: FindOneOptions): Promise {\n    const user = await this.usersRepository.findOne(options);\n    if (!user) throw new NotFoundException('User not found');\n    return user;\n  }\n\n  async updateById(id: number, dto: UserUpdateDto): Promise {\n    const user = await this.usersRepository.preload({ id, ...dto });\n    if (!user) throw new NotFoundException('User not found');\n    await this.usersRepository.update({ id }, dto);\n    return user;\n  }\n\n  async deleteById(id: number): Promise {\n    const user = await this.usersRepository.findOneBy({ id });\n    if (!user) throw new NotFoundException('User not found');\n    return await this.usersRepository.remove(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/core/constants/api-endpoints.constants.ts\n            \n            variable\n            API_ENDPOINTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/api-endpoints.constants.ts\n            \n            variable\n            API_PARAMS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/api-endpoints.constants.ts\n            \n            variable\n            API_VERSIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/api-responses.constant.ts\n            \n            variable\n            API_RESPONSES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/environment.variables.ts\n            \n            class\n            EnvironmentVariables\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/core/constants/http-response.interface.ts\n            \n            interface\n            IHttpResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/services/database/database.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/services/environment/environment.service.ts\n            \n            injectable\n            EnvironmentService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/integrations/authentication/constants/auth-role.constant.ts\n            \n            variable\n            ALL_ROLES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/integrations/authentication/constants/auth-role.constant.ts\n            \n            variable\n            ALL_ROLES_EXCEPT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/integrations/authentication/constants/auth-role.constant.ts\n            \n            variable\n            AUTH_ROLE_VALUES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/integrations/authentication/constants/auth-token-response.constant.ts\n            \n            class\n            AuthTokenResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/integrations/authentication/constants/decoded-token.constant.ts\n            \n            interface\n            IDecodedToken\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/integrations/authentication/decorators/current-auth.decorator.ts\n            \n            variable\n            CurrentAuth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/integrations/authentication/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/integrations/authentication/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/integrations/authentication/dto/authentication-signup.dto.ts\n            \n            class\n            AuthenticationSignUpDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/integrations/authentication/entities/auth-roles.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/integrations/authentication/entities/authentication.entity.ts\n            \n            entity\n            Authentication\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/integrations/authentication/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/integrations/authentication/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/integrations/authentication/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/integrations/authentication/services/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/integrations/authentication/strategies/jwt-auth.strategy.ts\n            \n            injectable\n            JwtAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/integrations/authentication/strategies/local-auth.strategy.ts\n            \n            injectable\n            LocalAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/products/controllers/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/products/dto/product-create.dto.ts\n            \n            class\n            ProductCreateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/products/dto/product-update.dto.ts\n            \n            class\n            ProductUpdateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/products/entities/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/products/services/products/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/users/controllers/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/controllers/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/users/decorators/session-guard.decorator.ts\n            \n            function\n            UseSessionGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user-auth-token.dto.ts\n            \n            class\n            UserAuthTokenDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user-create.dto.ts\n            \n            class\n            UserCreateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user-login.dto.ts\n            \n            class\n            UserLogInDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user-signup.dto.ts\n            \n            class\n            UserSignUpDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user-update.dto.ts\n            \n            class\n            UserUpdateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/guards/session-guard.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/services/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/services/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/shared/decorators/api-common.decorator.ts\n            \n            interface\n            ApiMethodParams\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/shared/decorators/api-common.decorator.ts\n            \n            function\n            ApiDelete\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/api-common.decorator.ts\n            \n            function\n            ApiGet\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/api-common.decorator.ts\n            \n            function\n            ApiMethod\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/api-common.decorator.ts\n            \n            function\n            ApiPatch\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/api-common.decorator.ts\n            \n            function\n            ApiPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/api-common.decorator.ts\n            \n            function\n            ApiPut\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/is-password.decorator.ts\n            \n            function\n            IsPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/is-password.decorator.ts\n            \n            function\n            validatePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/is-password.decorator.ts\n            \n            variable\n            PASSWORD_DESCRIPTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/match-property.decorator.ts\n            \n            function\n            MatchProperty\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.3\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            await-to-js : ^3.0.0\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            lodash : ^4.17.21\n        \n            mysql2 : ^2.3.3\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.10\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthRole   (src/.../auth-role.constant.ts)\n                        \n                        \n                            Environment   (src/.../environment.variables.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/integrations/authentication/constants/auth-role.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 REGULAR\n                            \n                        \n                        \n                            \n                                Value : regular\n                            \n                        \n            \n        \n\n    src/core/constants/environment.variables.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 DEVELOPMENT\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 PRODUCTION\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 TEST\n                            \n                        \n                        \n                            \n                                Value : test\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiDelete   (src/.../api-common.decorator.ts)\n                        \n                        \n                            ApiGet   (src/.../api-common.decorator.ts)\n                        \n                        \n                            ApiMethod   (src/.../api-common.decorator.ts)\n                        \n                        \n                            ApiPatch   (src/.../api-common.decorator.ts)\n                        \n                        \n                            ApiPost   (src/.../api-common.decorator.ts)\n                        \n                        \n                            ApiPut   (src/.../api-common.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsPassword   (src/.../is-password.decorator.ts)\n                        \n                        \n                            MatchProperty   (src/.../match-property.decorator.ts)\n                        \n                        \n                            UseSessionGuard   (src/.../session-guard.decorator.ts)\n                        \n                        \n                            validatePassword   (src/.../is-password.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/decorators/api-common.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiDelete\n                        \n                    \n                \n            \n            \n                \nApiDelete(params?: ApiMethodParams)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ApiMethodParams\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     MethodDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ApiGet\n                        \n                    \n                \n            \n            \n                \nApiGet(params?: ApiMethodParams)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ApiMethodParams\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     MethodDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ApiMethod\n                        \n                    \n                \n            \n            \n                \nApiMethod(params?: ApiMethodParams)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ApiMethodParams\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     MethodDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ApiPatch\n                        \n                    \n                \n            \n            \n                \nApiPatch(params?: ApiMethodParams)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ApiMethodParams\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     MethodDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ApiPost\n                        \n                    \n                \n            \n            \n                \nApiPost(params?: ApiMethodParams)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ApiMethodParams\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     MethodDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ApiPut\n                        \n                    \n                \n            \n            \n                \nApiPut(params?: ApiMethodParams)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ApiMethodParams\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     MethodDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/shared/decorators/is-password.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsPassword\n                        \n                    \n                \n            \n            \n                \nIsPassword(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validatePassword\n                        \n                    \n                \n            \n            \n                \nvalidatePassword(value: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/shared/decorators/match-property.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MatchProperty\n                        \n                    \n                \n            \n            \n                \nMatchProperty(property: string, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    property\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/modules/users/decorators/session-guard.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UseSessionGuard\n                        \n                    \n                \n            \n            \n                \nUseSessionGuard()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     MethodDecorator\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nCoreModule\n\nCoreModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nAuthenticationModule \n\nAuthenticationModule \n\nAuthenticationModule  -->\n\nCoreModule->AuthenticationModule \n\n\n\n\n\nEnvironmentService \n\nEnvironmentService \n\nEnvironmentService  -->\n\nCoreModule->EnvironmentService \n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nProductsModule -->\n\nUsersModule->ProductsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nUsersModule->SessionService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nCoreModule -->\n\nAuthenticationModule->CoreModule\n\n\n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nAuthenticationModule -->\n\nJwtAuthStrategy->AuthenticationModule\n\n\n\n\n\nLocalAuthStrategy\n\nLocalAuthStrategy\n\nAuthenticationModule -->\n\nLocalAuthStrategy->AuthenticationModule\n\n\n\n\n\nEnvironmentService\n\nEnvironmentService\n\nCoreModule -->\n\nEnvironmentService->CoreModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nUsersModule -->\n\nSessionService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ALL_ROLES   (src/.../auth-role.constant.ts)\n                        \n                        \n                            ALL_ROLES_EXCEPT   (src/.../auth-role.constant.ts)\n                        \n                        \n                            API_ENDPOINTS   (src/.../api-endpoints.constants.ts)\n                        \n                        \n                            API_PARAMS   (src/.../api-endpoints.constants.ts)\n                        \n                        \n                            API_RESPONSES   (src/.../api-responses.constant.ts)\n                        \n                        \n                            API_VERSIONS   (src/.../api-endpoints.constants.ts)\n                        \n                        \n                            AUTH_ROLE_VALUES   (src/.../auth-role.constant.ts)\n                        \n                        \n                            CurrentAuth   (src/.../current-auth.decorator.ts)\n                        \n                        \n                            PASSWORD_DESCRIPTION   (src/.../is-password.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/integrations/authentication/constants/auth-role.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ALL_ROLES\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [AuthRole.ADMIN, AuthRole.REGULAR]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ALL_ROLES_EXCEPT\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: AuthRole[]) => AUTH_ROLE_VALUES.filter((role) => !roles.includes(role))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_ROLE_VALUES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.values(AuthRole)\n                    \n                \n\n\n        \n    \n\n    src/core/constants/api-endpoints.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API_ENDPOINTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  USERS: {\n    BASE_PATH: 'users',\n    BY_ID: API_PARAMS.BY_ID,\n    SESSION: {\n      BASE_PATH: 'session',\n      LOG_IN: 'log-in',\n      SIGN_UP: 'sign-up',\n    },\n  },\n  PRODUCTS: {\n    BASE_PATH: 'products',\n    BY_ID: API_PARAMS.BY_ID,\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        API_PARAMS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  BY_ID: ':id',\n  BY_USER: 'user/:user',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        API_VERSIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  V1: '1',\n  V2: '2',\n  V3: '3',\n}\n                    \n                \n\n\n        \n    \n\n    src/core/constants/api-responses.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API_RESPONSES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  COMMON_ERROR: {\n    description: 'A response body representing a runtime error',\n    schema: {\n      type: 'object',\n      properties: {\n        status: { type: 'number', description: 'The HTTP response status code' },\n        name: { type: 'string', description: 'The name of the found exception' },\n        error: { type: 'string', description: 'General purpose error code' },\n        messages: {\n          type: 'array',\n          items: { type: 'string' },\n          description: 'The human-readable messages provided for the error',\n        },\n        path: { type: 'string', description: 'The path to the called API' },\n        timestamp: { type: 'string', description: 'The request timestamp' },\n        stack: { type: 'string', description: 'The call stack leading to the error' },\n      },\n    },\n    status: 400,\n  } as ApiResponseOptions,\n\n  BASIC_MESSAGE: {\n    description: 'A basic success response body with a message',\n    schema: {\n      type: 'object',\n      properties: {\n        message: { type: 'string' },\n      },\n    },\n    status: 200,\n  } as ApiResponseOptions,\n\n  VALIDATION: {\n    description: 'A success response body indicating the result of a validation request',\n    schema: {\n      type: 'object',\n      properties: {\n        data: {\n          type: 'object',\n          properties: {\n            valid: { type: 'boolean' },\n          },\n        },\n      },\n    },\n    status: 200,\n  } as ApiResponseOptions,\n\n  DELETION: {\n    description: 'A success response body indicating the result of a deletion request',\n    schema: {\n      type: 'object',\n      properties: {\n        data: {\n          type: 'object',\n          properties: {\n            raw: { type: 'object' },\n            affected: { type: 'number' },\n          },\n        },\n      },\n    },\n  } as ApiResponseOptions,\n}\n                    \n                \n\n\n        \n    \n\n    src/integrations/authentication/decorators/current-auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentAuth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  const request = ctx.switchToHttp().getRequest();\n  return request.user as Authentication;\n})\n                    \n                \n\n\n        \n    \n\n    src/shared/decorators/is-password.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PASSWORD_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Must contain at least one of: upper case letter, lower case letter, number and special character. Minimum length is 8 and maximum is 32'\n                    \n                \n\n\n        \n    \n\n    src/integrations/authentication/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: AuthRole[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
